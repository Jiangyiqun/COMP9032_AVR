
AVRASM ver. 2.2.6  C:\Users\jackj\Github\COMP9032_AVR\Project_1\Drone_Simulation.asm Tue Oct 24 20:03:46 2017

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
C:\Users\jackj\Github\COMP9032_AVR\Project_1\Drone_Simulation.asm(17): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
C:\Users\jackj\Github\COMP9032_AVR\Project_1\Drone_Simulation.asm(80): Including file 'C:\Users\jackj\Github\COMP9032_AVR\Project_1\mountain_map.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
C:\Users\jackj\Github\COMP9032_AVR\Project_1\Drone_Simulation.asm(17): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
C:\Users\jackj\Github\COMP9032_AVR\Project_1\Drone_Simulation.asm(80): Including file 'C:\Users\jackj\Github\COMP9032_AVR\Project_1\mountain_map.inc'
                                 
                                 ; AUTHOR: Jack Jiang
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #define _M2560DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega2560
                                 #pragma AVRPART ADMIN PART_NAME ATmega2560
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x98
                                 .equ	SIGNATURE_002	= 0x01
                                 
                                 #pragma AVRPART CORE CORE_VERSION V3
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR3	= 0x136	; MEMORY MAPPED
                                 .equ	UBRR3L	= 0x134	; MEMORY MAPPED
                                 .equ	UBRR3H	= 0x135	; MEMORY MAPPED
                                 .equ	UCSR3C	= 0x132	; MEMORY MAPPED
                                 .equ	UCSR3B	= 0x131	; MEMORY MAPPED
                                 .equ	UCSR3A	= 0x130	; MEMORY MAPPED
                                 .equ	OCR5CL	= 0x12c	; MEMORY MAPPED
                                 .equ	OCR5CH	= 0x12d	; MEMORY MAPPED
                                 .equ	OCR5BL	= 0x12a	; MEMORY MAPPED
                                 .equ	OCR5BH	= 0x12b	; MEMORY MAPPED
                                 .equ	OCR5AL	= 0x128	; MEMORY MAPPED
                                 .equ	OCR5AH	= 0x129	; MEMORY MAPPED
                                 .equ	ICR5H	= 0x127	; MEMORY MAPPED
                                 .equ	ICR5L	= 0x126	; MEMORY MAPPED
                                 .equ	TCNT5L	= 0x124	; MEMORY MAPPED
                                 .equ	TCNT5H	= 0x125	; MEMORY MAPPED
                                 .equ	TCCR5C	= 0x122	; MEMORY MAPPED
                                 .equ	TCCR5B	= 0x121	; MEMORY MAPPED
                                 .equ	TCCR5A	= 0x120	; MEMORY MAPPED
                                 .equ	PORTL	= 0x10b	; MEMORY MAPPED
                                 .equ	DDRL	= 0x10a	; MEMORY MAPPED
                                 .equ	PINL	= 0x109	; MEMORY MAPPED
                                 .equ	PORTK	= 0x108	; MEMORY MAPPED
                                 .equ	DDRK	= 0x107	; MEMORY MAPPED
                                 .equ	PINK	= 0x106	; MEMORY MAPPED
                                 .equ	PORTJ	= 0x105	; MEMORY MAPPED
                                 .equ	DDRJ	= 0x104	; MEMORY MAPPED
                                 .equ	PINJ	= 0x103	; MEMORY MAPPED
                                 .equ	PORTH	= 0x102	; MEMORY MAPPED
                                 .equ	DDRH	= 0x101	; MEMORY MAPPED
                                 .equ	PINH	= 0x100	; MEMORY MAPPED
                                 .equ	UDR2	= 0xd6	; MEMORY MAPPED
                                 .equ	UBRR2L	= 0xd4	; MEMORY MAPPED
                                 .equ	UBRR2H	= 0xd5	; MEMORY MAPPED
                                 .equ	UCSR2C	= 0xd2	; MEMORY MAPPED
                                 .equ	UCSR2B	= 0xd1	; MEMORY MAPPED
                                 .equ	UCSR2A	= 0xd0	; MEMORY MAPPED
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR4CL	= 0xac	; MEMORY MAPPED
                                 .equ	OCR4CH	= 0xad	; MEMORY MAPPED
                                 .equ	OCR4BL	= 0xaa	; MEMORY MAPPED
                                 .equ	OCR4BH	= 0xab	; MEMORY MAPPED
                                 .equ	OCR4AL	= 0xa8	; MEMORY MAPPED
                                 .equ	OCR4AH	= 0xa9	; MEMORY MAPPED
                                 .equ	ICR4L	= 0xa6	; MEMORY MAPPED
                                 .equ	ICR4H	= 0xa7	; MEMORY MAPPED
                                 .equ	TCNT4L	= 0xa4	; MEMORY MAPPED
                                 .equ	TCNT4H	= 0xa5	; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xa2	; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xa1	; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xa0	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x9c	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x9d	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x8c	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x8d	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	DIDR2	= 0x7d	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x75	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x74	; MEMORY MAPPED
                                 .equ	TIMSK5	= 0x73	; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72	; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRB	= 0x6a	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	EIND	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR5	= 0x1a
                                 .equ	TIFR4	= 0x19
                                 .equ	TIFR3	= 0x18
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTG	= 0x14
                                 .equ	DDRG	= 0x13
                                 .equ	PING	= 0x12
                                 .equ	PORTF	= 0x11
                                 .equ	DDRF	= 0x10
                                 .equ	PINF	= 0x0f
                                 .equ	PORTE	= 0x0e
                                 .equ	DDRE	= 0x0d
                                 .equ	PINE	= 0x0c
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	PORTA	= 0x02
                                 .equ	DDRA	= 0x01
                                 .equ	PINA	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 .equ	PORTG5	= 5	; 
                                 .equ	PG5	= 5	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 .equ	DDG5	= 5	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 .equ	PING5	= 5	; 
                                 
                                 
                                 ; ***** PORTH ************************
                                 ; PORTH - PORT H Data Register
                                 .equ	PORTH0	= 0	; PORT H Data Register bit 0
                                 .equ	PH0	= 0	; For compatibility
                                 .equ	PORTH1	= 1	; PORT H Data Register bit 1
                                 .equ	PH1	= 1	; For compatibility
                                 .equ	PORTH2	= 2	; PORT H Data Register bit 2
                                 .equ	PH2	= 2	; For compatibility
                                 .equ	PORTH3	= 3	; PORT H Data Register bit 3
                                 .equ	PH3	= 3	; For compatibility
                                 .equ	PORTH4	= 4	; PORT H Data Register bit 4
                                 .equ	PH4	= 4	; For compatibility
                                 .equ	PORTH5	= 5	; PORT H Data Register bit 5
                                 .equ	PH5	= 5	; For compatibility
                                 .equ	PORTH6	= 6	; PORT H Data Register bit 6
                                 .equ	PH6	= 6	; For compatibility
                                 .equ	PORTH7	= 7	; PORT H Data Register bit 7
                                 .equ	PH7	= 7	; For compatibility
                                 
                                 ; DDRH - PORT H Data Direction Register
                                 .equ	DDH0	= 0	; PORT H Data Direction Register bit 0
                                 .equ	DDH1	= 1	; PORT H Data Direction Register bit 1
                                 .equ	DDH2	= 2	; PORT H Data Direction Register bit 2
                                 .equ	DDH3	= 3	; PORT H Data Direction Register bit 3
                                 .equ	DDH4	= 4	; PORT H Data Direction Register bit 4
                                 .equ	DDH5	= 5	; PORT H Data Direction Register bit 5
                                 .equ	DDH6	= 6	; PORT H Data Direction Register bit 6
                                 .equ	DDH7	= 7	; PORT H Data Direction Register bit 7
                                 
                                 ; PINH - PORT H Input Pins
                                 .equ	PINH0	= 0	; PORT H Input Pins bit 0
                                 .equ	PINH1	= 1	; PORT H Input Pins bit 1
                                 .equ	PINH2	= 2	; PORT H Input Pins bit 2
                                 .equ	PINH3	= 3	; PORT H Input Pins bit 3
                                 .equ	PINH4	= 4	; PORT H Input Pins bit 4
                                 .equ	PINH5	= 5	; PORT H Input Pins bit 5
                                 .equ	PINH6	= 6	; PORT H Input Pins bit 6
                                 .equ	PINH7	= 7	; PORT H Input Pins bit 7
                                 
                                 
                                 ; ***** PORTJ ************************
                                 ; PORTJ - PORT J Data Register
                                 .equ	PORTJ0	= 0	; PORT J Data Register bit 0
                                 .equ	PJ0	= 0	; For compatibility
                                 .equ	PORTJ1	= 1	; PORT J Data Register bit 1
                                 .equ	PJ1	= 1	; For compatibility
                                 .equ	PORTJ2	= 2	; PORT J Data Register bit 2
                                 .equ	PJ2	= 2	; For compatibility
                                 .equ	PORTJ3	= 3	; PORT J Data Register bit 3
                                 .equ	PJ3	= 3	; For compatibility
                                 .equ	PORTJ4	= 4	; PORT J Data Register bit 4
                                 .equ	PJ4	= 4	; For compatibility
                                 .equ	PORTJ5	= 5	; PORT J Data Register bit 5
                                 .equ	PJ5	= 5	; For compatibility
                                 .equ	PORTJ6	= 6	; PORT J Data Register bit 6
                                 .equ	PJ6	= 6	; For compatibility
                                 .equ	PORTJ7	= 7	; PORT J Data Register bit 7
                                 .equ	PJ7	= 7	; For compatibility
                                 
                                 ; DDRJ - PORT J Data Direction Register
                                 .equ	DDJ0	= 0	; PORT J Data Direction Register bit 0
                                 .equ	DDJ1	= 1	; PORT J Data Direction Register bit 1
                                 .equ	DDJ2	= 2	; PORT J Data Direction Register bit 2
                                 .equ	DDJ3	= 3	; PORT J Data Direction Register bit 3
                                 .equ	DDJ4	= 4	; PORT J Data Direction Register bit 4
                                 .equ	DDJ5	= 5	; PORT J Data Direction Register bit 5
                                 .equ	DDJ6	= 6	; PORT J Data Direction Register bit 6
                                 .equ	DDJ7	= 7	; PORT J Data Direction Register bit 7
                                 
                                 ; PINJ - PORT J Input Pins
                                 .equ	PINJ0	= 0	; PORT J Input Pins bit 0
                                 .equ	PINJ1	= 1	; PORT J Input Pins bit 1
                                 .equ	PINJ2	= 2	; PORT J Input Pins bit 2
                                 .equ	PINJ3	= 3	; PORT J Input Pins bit 3
                                 .equ	PINJ4	= 4	; PORT J Input Pins bit 4
                                 .equ	PINJ5	= 5	; PORT J Input Pins bit 5
                                 .equ	PINJ6	= 6	; PORT J Input Pins bit 6
                                 .equ	PINJ7	= 7	; PORT J Input Pins bit 7
                                 
                                 
                                 ; ***** PORTK ************************
                                 ; PORTK - PORT K Data Register
                                 .equ	PORTK0	= 0	; PORT K Data Register bit 0
                                 .equ	PK0	= 0	; For compatibility
                                 .equ	PORTK1	= 1	; PORT K Data Register bit 1
                                 .equ	PK1	= 1	; For compatibility
                                 .equ	PORTK2	= 2	; PORT K Data Register bit 2
                                 .equ	PK2	= 2	; For compatibility
                                 .equ	PORTK3	= 3	; PORT K Data Register bit 3
                                 .equ	PK3	= 3	; For compatibility
                                 .equ	PORTK4	= 4	; PORT K Data Register bit 4
                                 .equ	PK4	= 4	; For compatibility
                                 .equ	PORTK5	= 5	; PORT K Data Register bit 5
                                 .equ	PK5	= 5	; For compatibility
                                 .equ	PORTK6	= 6	; PORT K Data Register bit 6
                                 .equ	PK6	= 6	; For compatibility
                                 .equ	PORTK7	= 7	; PORT K Data Register bit 7
                                 .equ	PK7	= 7	; For compatibility
                                 
                                 ; DDRK - PORT K Data Direction Register
                                 .equ	DDK0	= 0	; PORT K Data Direction Register bit 0
                                 .equ	DDK1	= 1	; PORT K Data Direction Register bit 1
                                 .equ	DDK2	= 2	; PORT K Data Direction Register bit 2
                                 .equ	DDK3	= 3	; PORT K Data Direction Register bit 3
                                 .equ	DDK4	= 4	; PORT K Data Direction Register bit 4
                                 .equ	DDK5	= 5	; PORT K Data Direction Register bit 5
                                 .equ	DDK6	= 6	; PORT K Data Direction Register bit 6
                                 .equ	DDK7	= 7	; PORT K Data Direction Register bit 7
                                 
                                 ; PINK - PORT K Input Pins
                                 .equ	PINK0	= 0	; PORT K Input Pins bit 0
                                 .equ	PINK1	= 1	; PORT K Input Pins bit 1
                                 .equ	PINK2	= 2	; PORT K Input Pins bit 2
                                 .equ	PINK3	= 3	; PORT K Input Pins bit 3
                                 .equ	PINK4	= 4	; PORT K Input Pins bit 4
                                 .equ	PINK5	= 5	; PORT K Input Pins bit 5
                                 .equ	PINK6	= 6	; PORT K Input Pins bit 6
                                 .equ	PINK7	= 7	; PORT K Input Pins bit 7
                                 
                                 
                                 ; ***** PORTL ************************
                                 ; PORTL - PORT L Data Register
                                 .equ	PORTL0	= 0	; PORT L Data Register bit 0
                                 .equ	PL0	= 0	; For compatibility
                                 .equ	PORTL1	= 1	; PORT L Data Register bit 1
                                 .equ	PL1	= 1	; For compatibility
                                 .equ	PORTL2	= 2	; PORT L Data Register bit 2
                                 .equ	PL2	= 2	; For compatibility
                                 .equ	PORTL3	= 3	; PORT L Data Register bit 3
                                 .equ	PL3	= 3	; For compatibility
                                 .equ	PORTL4	= 4	; PORT L Data Register bit 4
                                 .equ	PL4	= 4	; For compatibility
                                 .equ	PORTL5	= 5	; PORT L Data Register bit 5
                                 .equ	PL5	= 5	; For compatibility
                                 .equ	PORTL6	= 6	; PORT L Data Register bit 6
                                 .equ	PL6	= 6	; For compatibility
                                 .equ	PORTL7	= 7	; PORT L Data Register bit 7
                                 .equ	PL7	= 7	; For compatibility
                                 
                                 ; DDRL - PORT L Data Direction Register
                                 .equ	DDL0	= 0	; PORT L Data Direction Register bit 0
                                 .equ	DDL1	= 1	; PORT L Data Direction Register bit 1
                                 .equ	DDL2	= 2	; PORT L Data Direction Register bit 2
                                 .equ	DDL3	= 3	; PORT L Data Direction Register bit 3
                                 .equ	DDL4	= 4	; PORT L Data Direction Register bit 4
                                 .equ	DDL5	= 5	; PORT L Data Direction Register bit 5
                                 .equ	DDL6	= 6	; PORT L Data Direction Register bit 6
                                 .equ	DDL7	= 7	; PORT L Data Direction Register bit 7
                                 
                                 ; PINL - PORT L Input Pins
                                 .equ	PINL0	= 0	; PORT L Input Pins bit 0
                                 .equ	PINL1	= 1	; PORT L Input Pins bit 1
                                 .equ	PINL2	= 2	; PORT L Input Pins bit 2
                                 .equ	PINL3	= 3	; PORT L Input Pins bit 3
                                 .equ	PINL4	= 4	; PORT L Input Pins bit 4
                                 .equ	PINL5	= 5	; PORT L Input Pins bit 5
                                 .equ	PINL6	= 6	; PORT L Input Pins bit 6
                                 .equ	PINL7	= 7	; PORT L Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_5 **************
                                 ; TIMSK5 - Timer/Counter5 Interrupt Mask Register
                                 .equ	TOIE5	= 0	; Timer/Counter5 Overflow Interrupt Enable
                                 .equ	OCIE5A	= 1	; Timer/Counter5 Output Compare A Match Interrupt Enable
                                 .equ	OCIE5B	= 2	; Timer/Counter5 Output Compare B Match Interrupt Enable
                                 .equ	OCIE5C	= 3	; Timer/Counter5 Output Compare C Match Interrupt Enable
                                 .equ	ICIE5	= 5	; Timer/Counter5 Input Capture Interrupt Enable
                                 
                                 ; TIFR5 - Timer/Counter5 Interrupt Flag register
                                 .equ	TOV5	= 0	; Timer/Counter5 Overflow Flag
                                 .equ	OCF5A	= 1	; Output Compare Flag 5A
                                 .equ	OCF5B	= 2	; Output Compare Flag 5B
                                 .equ	OCF5C	= 3	; Output Compare Flag 5C
                                 .equ	ICF5	= 5	; Input Capture Flag 5
                                 
                                 ; TCCR5A - Timer/Counter5 Control Register A
                                 .equ	WGM50	= 0	; Waveform Generation Mode
                                 .equ	WGM51	= 1	; Waveform Generation Mode
                                 .equ	COM5C0	= 2	; Compare Output Mode 5C, bit 0
                                 .equ	COM5C1	= 3	; Compare Output Mode 5C, bit 1
                                 .equ	COM5B0	= 4	; Compare Output Mode 5B, bit 0
                                 .equ	COM5B1	= 5	; Compare Output Mode 5B, bit 1
                                 .equ	COM5A0	= 6	; Compare Output Mode 5A, bit 0
                                 .equ	COM5A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR5B - Timer/Counter5 Control Register B
                                 .equ	CS50	= 0	; Prescaler source of Timer/Counter 5
                                 .equ	CS51	= 1	; Prescaler source of Timer/Counter 5
                                 .equ	CS52	= 2	; Prescaler source of Timer/Counter 5
                                 .equ	WGM52	= 3	; Waveform Generation Mode
                                 .equ	WGM53	= 4	; Waveform Generation Mode
                                 .equ	ICES5	= 6	; Input Capture 5 Edge Select
                                 .equ	ICNC5	= 7	; Input Capture 5 Noise Canceler
                                 
                                 ; TCCR5C - Timer/Counter 5 Control Register C
                                 .equ	FOC5C	= 5	; Force Output Compare 5C
                                 .equ	FOC5B	= 6	; Force Output Compare 5B
                                 .equ	FOC5A	= 7	; Force Output Compare 5A
                                 
                                 ; ICR5H - Timer/Counter5 Input Capture Register High Byte
                                 .equ	ICR5H0	= 0	; Timer/Counter5 Input Capture Register High Byte bit 0
                                 .equ	ICR5H1	= 1	; Timer/Counter5 Input Capture Register High Byte bit 1
                                 .equ	ICR5H2	= 2	; Timer/Counter5 Input Capture Register High Byte bit 2
                                 .equ	ICR5H3	= 3	; Timer/Counter5 Input Capture Register High Byte bit 3
                                 .equ	ICR5H4	= 4	; Timer/Counter5 Input Capture Register High Byte bit 4
                                 .equ	ICR5H5	= 5	; Timer/Counter5 Input Capture Register High Byte bit 5
                                 .equ	ICR5H6	= 6	; Timer/Counter5 Input Capture Register High Byte bit 6
                                 .equ	ICR5H7	= 7	; Timer/Counter5 Input Capture Register High Byte bit 7
                                 
                                 ; ICR5L - Timer/Counter5 Input Capture Register Low Byte
                                 .equ	ICR5L0	= 0	; Timer/Counter5 Input Capture Register Low Byte bit 0
                                 .equ	ICR5L1	= 1	; Timer/Counter5 Input Capture Register Low Byte bit 1
                                 .equ	ICR5L2	= 2	; Timer/Counter5 Input Capture Register Low Byte bit 2
                                 .equ	ICR5L3	= 3	; Timer/Counter5 Input Capture Register Low Byte bit 3
                                 .equ	ICR5L4	= 4	; Timer/Counter5 Input Capture Register Low Byte bit 4
                                 .equ	ICR5L5	= 5	; Timer/Counter5 Input Capture Register Low Byte bit 5
                                 .equ	ICR5L6	= 6	; Timer/Counter5 Input Capture Register Low Byte bit 6
                                 .equ	ICR5L7	= 7	; Timer/Counter5 Input Capture Register Low Byte bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_4 **************
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 0	; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4A	= 1	; Timer/Counter4 Output Compare A Match Interrupt Enable
                                 .equ	OCIE4B	= 2	; Timer/Counter4 Output Compare B Match Interrupt Enable
                                 .equ	OCIE4C	= 3	; Timer/Counter4 Output Compare C Match Interrupt Enable
                                 .equ	ICIE4	= 5	; Timer/Counter4 Input Capture Interrupt Enable
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 0	; Timer/Counter4 Overflow Flag
                                 .equ	OCF4A	= 1	; Output Compare Flag 4A
                                 .equ	OCF4B	= 2	; Output Compare Flag 4B
                                 .equ	OCF4C	= 3	; Output Compare Flag 4C
                                 .equ	ICF4	= 5	; Input Capture Flag 4
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	WGM40	= 0	; Waveform Generation Mode
                                 .equ	WGM41	= 1	; Waveform Generation Mode
                                 .equ	COM4C0	= 2	; Compare Output Mode 4C, bit 0
                                 .equ	COM4C1	= 3	; Compare Output Mode 4C, bit 1
                                 .equ	COM4B0	= 4	; Compare Output Mode 4B, bit 0
                                 .equ	COM4B1	= 5	; Compare Output Mode 4B, bit 1
                                 .equ	COM4A0	= 6	; Compare Output Mode 4A, bit 0
                                 .equ	COM4A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0	; Prescaler source of Timer/Counter 4
                                 .equ	CS41	= 1	; Prescaler source of Timer/Counter 4
                                 .equ	CS42	= 2	; Prescaler source of Timer/Counter 4
                                 .equ	WGM42	= 3	; Waveform Generation Mode
                                 .equ	WGM43	= 4	; Waveform Generation Mode
                                 .equ	ICES4	= 6	; Input Capture 4 Edge Select
                                 .equ	ICNC4	= 7	; Input Capture 4 Noise Canceler
                                 
                                 ; TCCR4C - Timer/Counter 4 Control Register C
                                 .equ	FOC4C	= 5	; Force Output Compare 4C
                                 .equ	FOC4B	= 6	; Force Output Compare 4B
                                 .equ	FOC4A	= 7	; Force Output Compare 4A
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                                 .equ	OCIE3C	= 3	; Timer/Counter3 Output Compare C Match Interrupt Enable
                                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1	; Output Compare Flag 3A
                                 .equ	OCF3B	= 2	; Output Compare Flag 3B
                                 .equ	OCF3C	= 3	; Output Compare Flag 3C
                                 .equ	ICF3	= 5	; Input Capture Flag 3
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode
                                 .equ	WGM31	= 1	; Waveform Generation Mode
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Compare Output Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Prescaler source of Timer/Counter 3
                                 .equ	CS31	= 1	; Prescaler source of Timer/Counter 3
                                 .equ	CS32	= 2	; Prescaler source of Timer/Counter 3
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter 3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare 3C
                                 .equ	FOC3B	= 6	; Force Output Compare 3B
                                 .equ	FOC3A	= 7	; Force Output Compare 3A
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	OCIE1C	= 3	; Timer/Counter1 Output Compare C Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter1 Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	OCF1C	= 3	; Output Compare Flag 1C
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Output Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter 1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare 1C
                                 .equ	FOC1B	= 6	; Force Output Compare 1B
                                 .equ	FOC1A	= 7	; Force Output Compare 1A
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 .equ	PCINT15	= 7	; Pin Change Enable Mask 15
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW00	= 0	; Wait state select bit lower page
                                 .equ	SRW01	= 1	; Wait state select bit lower page
                                 .equ	SRW10	= 2	; Wait state select bit upper page
                                 .equ	SRW11	= 3	; Wait state select bit upper page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 .equ	RAMPZ1	= 1	; RAM Page Z Select Register Bit 1
                                 
                                 ; EIND - Extended Indirect Register
                                 .equ	EIND0	= 0	; Bit 0
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR1 - Power Reduction Register1
                                 .equ	PRUSART1	= 0	; Power Reduction USART1
                                 .equ	PRUSART2	= 1	; Power Reduction USART2
                                 .equ	PRUSART3	= 2	; Power Reduction USART3
                                 .equ	PRTIM3	= 3	; Power Reduction Timer/Counter3
                                 .equ	PRTIM4	= 4	; Power Reduction Timer/Counter4
                                 .equ	PRTIM5	= 5	; Power Reduction Timer/Counter5
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	MUX5	= 3	; Analog Channel and Gain Selection Bits
                                 ;.equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 .equ	ADC6D	= 6	; 
                                 .equ	ADC7D	= 7	; 
                                 
                                 ; DIDR2 - Digital Input Disable Register
                                 .equ	ADC8D	= 0	; 
                                 .equ	ADC9D	= 1	; 
                                 .equ	ADC10D	= 2	; 
                                 .equ	ADC11D	= 3	; 
                                 .equ	ADC12D	= 4	; 
                                 .equ	ADC13D	= 5	; 
                                 .equ	ADC14D	= 6	; 
                                 .equ	ADC15D	= 7	; 
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** USART2 ***********************
                                 ; UDR2 - USART I/O Data Register
                                 .equ	UDR2_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR2_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR2_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR2_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR2_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR2_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR2_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR2A - USART Control and Status Register A
                                 .equ	MPCM2	= 0	; Multi-processor Communication Mode
                                 .equ	U2X2	= 1	; Double the USART transmission speed
                                 .equ	UPE2	= 2	; Parity Error
                                 .equ	DOR2	= 3	; Data overRun
                                 .equ	FE2	= 4	; Framing Error
                                 .equ	UDRE2	= 5	; USART Data Register Empty
                                 .equ	TXC2	= 6	; USART Transmitt Complete
                                 .equ	RXC2	= 7	; USART Receive Complete
                                 
                                 ; UCSR2B - USART Control and Status Register B
                                 .equ	TXB82	= 0	; Transmit Data Bit 8
                                 .equ	RXB82	= 1	; Receive Data Bit 8
                                 .equ	UCSZ22	= 2	; Character Size
                                 .equ	TXEN2	= 3	; Transmitter Enable
                                 .equ	RXEN2	= 4	; Receiver Enable
                                 .equ	UDRIE2	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE2	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE2	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR2C - USART Control and Status Register C
                                 .equ	UCPOL2	= 0	; Clock Polarity
                                 .equ	UCSZ20	= 1	; Character Size
                                 .equ	UCSZ21	= 2	; Character Size
                                 .equ	USBS2	= 3	; Stop Bit Select
                                 .equ	UPM20	= 4	; Parity Mode Bit 0
                                 .equ	UPM21	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL20	= 6	; USART Mode Select
                                 .equ	UMSEL21	= 7	; USART Mode Select
                                 
                                 ; UBRR2H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR2L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART3 ***********************
                                 ; UDR3 - USART I/O Data Register
                                 .equ	UDR3_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR3_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR3_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR3_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR3_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR3_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR3_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR3A - USART Control and Status Register A
                                 .equ	MPCM3	= 0	; Multi-processor Communication Mode
                                 .equ	U2X3	= 1	; Double the USART transmission speed
                                 .equ	UPE3	= 2	; Parity Error
                                 .equ	DOR3	= 3	; Data overRun
                                 .equ	FE3	= 4	; Framing Error
                                 .equ	UDRE3	= 5	; USART Data Register Empty
                                 .equ	TXC3	= 6	; USART Transmitt Complete
                                 .equ	RXC3	= 7	; USART Receive Complete
                                 
                                 ; UCSR3B - USART Control and Status Register B
                                 .equ	TXB83	= 0	; Transmit Data Bit 8
                                 .equ	RXB83	= 1	; Receive Data Bit 8
                                 .equ	UCSZ32	= 2	; Character Size
                                 .equ	TXEN3	= 3	; Transmitter Enable
                                 .equ	RXEN3	= 4	; Receiver Enable
                                 .equ	UDRIE3	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE3	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE3	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR3C - USART Control and Status Register C
                                 .equ	UCPOL3	= 0	; Clock Polarity
                                 .equ	UCSZ30	= 1	; Character Size
                                 .equ	UCSZ31	= 2	; Character Size
                                 .equ	USBS3	= 3	; Stop Bit Select
                                 .equ	UPM30	= 4	; Parity Mode Bit 0
                                 .equ	UPM31	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL30	= 6	; USART Mode Select
                                 .equ	UMSEL31	= 7	; USART Mode Select
                                 
                                 ; UBRR3H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR3L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1ffff	; Note: Word address
                                 .equ	IOEND	= 0x01ff
                                 .equ	SRAM_START	= 0x0200
                                 .equ	SRAM_SIZE	= 8192
                                 .equ	RAMEND	= 0x21ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 262144
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 8192
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1f000
                                 .equ	NRWW_STOP_ADDR	= 0x1ffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1efff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0x1fe00
                                 .equ	SECONDBOOTSTART	= 0x1fc00
                                 .equ	THIRDBOOTSTART	= 0x1f800
                                 .equ	FOURTHBOOTSTART	= 0x1f000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	PCI0addr	= 0x0012	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0014	; Pin Change Interrupt Request 1
                                 .equ	PCI2addr	= 0x0016	; Pin Change Interrupt Request 2
                                 .equ	WDTaddr	= 0x0018	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x001a	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x001c	; Timer/Counter2 Compare Match B
                                 .equ	OVF2addr	= 0x001e	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0020	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0022	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0024	; Timer/Counter1 Compare Match B
                                 .equ	OC1Caddr	= 0x0026	; Timer/Counter1 Compare Match C
                                 .equ	OVF1addr	= 0x0028	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x002a	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x002c	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x002e	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0030	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0032	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0034	; USART0 Data register Empty
                                 .equ	UTXC0addr	= 0x0036	; USART0, Tx Complete
                                 .equ	ACIaddr	= 0x0038	; Analog Comparator
                                 .equ	ADCCaddr	= 0x003a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x003c	; EEPROM Ready
                                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0044	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x0046	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x0048	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x004a	; USART1 Data register Empty
                                 .equ	UTXC1addr	= 0x004c	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x004e	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0050	; Store Program Memory Read
                                 .equ	ICP4addr	= 0x0052	; Timer/Counter4 Capture Event
                                 .equ	OC4Aaddr	= 0x0054	; Timer/Counter4 Compare Match A
                                 .equ	OC4Baddr	= 0x0056	; Timer/Counter4 Compare Match B
                                 .equ	OC4Caddr	= 0x0058	; Timer/Counter4 Compare Match C
                                 .equ	OVF4addr	= 0x005a	; Timer/Counter4 Overflow
                                 .equ	ICP5addr	= 0x005c	; Timer/Counter5 Capture Event
                                 .equ	OC5Aaddr	= 0x005e	; Timer/Counter5 Compare Match A
                                 .equ	OC5Baddr	= 0x0060	; Timer/Counter5 Compare Match B
                                 .equ	OC5Caddr	= 0x0062	; Timer/Counter5 Compare Match C
                                 .equ	OVF5addr	= 0x0064	; Timer/Counter5 Overflow
                                 .equ	URXC2addr	= 0x0066	; USART2, Rx Complete
                                 .equ	UDRE2addr	= 0x0068	; USART2 Data register Empty
                                 .equ	UTXC2addr	= 0x006a	; USART2, Tx Complete
                                 .equ	URXC3addr	= 0x006c	; USART3, Rx Complete
                                 .equ	UDRE3addr	= 0x006e	; USART3 Data register Empty
                                 .equ	UTXC3addr	= 0x0070	; USART3, Tx Complete
                                 
                                 .equ	INT_VECTORS_SIZE	= 114	; size in words
                                 
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; DATE: 3/10/2017
                                 ; VERSION: 1
                                 ; DESCRIPTION:
                                 ;   The accident location can be set after the simulation starts.
                                 ;   The search can be interrupted by the user if the mission needs to be aborted early.
                                 ;
                                 
                                 ;======================================  Configuartion =========================================
                                 
                                             .EQU        DRONE_SPEED =  2000    ;   ms
                                             .EQU        DRONE_HEIGHT = 9       ;   m
                                             .EQU        MAP_SIZE = 64
                                 
                                 ;======================================  Defination =========================================
                                 
                                             .INCLUDE    "m2560def.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 
                                 ;   Register defination:
                                             .DEF        ARG1=R16
                                             .DEF        ARG2=R17
                                             .DEF        ARG3=R18
                                             .DEF        ARG4=R19
                                             .DEF        RETURN1=R20
                                             .DEF        RETURN2=R21
                                             .DEF        GLOBAL1=R22
                                             .DEF        GLOBAL2=R23
                                             .DEF        TEMP1=R24
                                             .DEF        TEMP2=R25
                                 
                                 		    .DEF        ACCIDENT_X=R2
                                             .DEF        ACCIDENT_Y=R3
                                 
                                 
                                 ;   LCD instruction defination:
                                             .EQU        LCD_CLR=0b00000001
                                             .EQU        LCD_RTN=0b00000010
                                             .EQU        LCD_ETR=0b00000100
                                             .EQU        LCD_ETR_S=0             ; S=1: shift, S=0: don't shift
                                             .EQU        LCD_ETR_ID=1            ; ID=1: increments, ID=0 decrements
                                             .EQU        LCD_DSP=0b00001000
                                             .EQU        LCD_DSP_B=0             ; B=1: blink on, B=0: blink off
                                             .EQU        LCD_DSP_C=1             ; C=1: display cursor, C=0: not display cursor
                                             .EQU        LCD_DSP_D=2             ; D=1: display on, D=0: display off
                                             .EQU        LCD_SFT=0b00010000
                                             .EQU        LCD_SFT_RL=2            ; RL=0: left, RL=1: right
                                             .EQU        LCD_SFT_SC=3            ; SC=0: cursor, SC=1: entire display
                                             .EQU        LCD_FUN=0b00100000
                                             .EQU        LCD_FUN_F=2             ; F=1: 5*10 dots, F=0: 5*7 dots
                                             .EQU        LCD_FUN_N=3             ; N=0: 1 line display, N=1: 2 lines display
                                             .EQU        LCD_FUN_DL=4            ; DL=1: 8 bit mode, DL=0: 4 bit mode
                                             .EQU        LCD_CG= 0b01000000
                                             .EQU        LCD_DD= 0b10000000
                                 
                                 
                                 
                                 ;====================================  Interupt vector ======================================
                                             
                                             .CSEG
                                             .ORG         0x0000
000000 940c 0b3c                             JMP        RESET
                                 
                                 
                                             .ORG          INT0addr
                                             ; Button RIGHT -- PD0 --- INT0
000002 940c 0cde                             JMP          RIGHT_INT
                                 
                                 
                                             .ORG          INT1addr
                                             ; Button LEFT -- PD1 --- INT1
000004 940c 0c72                             JMP          LEFT_INT
                                 
                                 ;=========================================  Data ============================================
                                 
                                             .ORG         0x0072
                                 
                                 
                                 ; Mountain map data
                                              .INCLUDE    "mountain_map.inc"
                                 
000072 1f1e
000073 2120
000074 2322
000075 2624
000076 2827
000077 2a29
000078 2c2b
000079 322d
00007a 3c37
00007b 4641
00007c 504b
00007d 5655
00007e 5857
00007f 5a59
000080 5c5b
000081 5e5d
000082 605f
000083 6261
000084 6463
000085 6665
000086 6867
000087 6a69
000088 6c6b
000089 6e6d
00008a 706f
00008b 6c71
00008c 6267
00008d 585d
00008e 4e53
00008f 4449
000090 3a3f
C:\Users\jackj\Github\COMP9032_AVR\Project_1\mountain_map.inc(2): warning: .cseg .db misalignment - padding zero byte
C:\Users\jackj\Github\COMP9032_AVR\Project_1\Drone_Simulation.asm(80): 'C:\Users\jackj\Github\COMP9032_AVR\Project_1\mountain_map.inc' included form here
000091 0035                      .db  30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 50, 55, 60, 65, 70, 75, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 108, 103, 98, 93, 88, 83, 78, 73000092 201f
000093 2221
000094 2423
000095 2625
000096 2827
000097 2a29
000098 2c2b
000099 2e2d
00009a 3833
00009b 423d
00009c 4c47
00009d 5651
00009e 5857
00009f 5a59
0000a0 5c5b
0000a1 5e5d
0000a2 605f
0000a3 6261
0000a4 6463
0000a5 6665
0000a6 6867
0000a7 6a69
0000a8 6c6b
0000a9 6e6d
0000aa 706f
0000ab 7271
0000ac 686d
0000ad 5e63
0000ae 5459
0000af 4a4f
0000b0 4045
0000b1 363b                      , 68, 63, 58, 53
0000b2 2120
0000b3 2322
0000b4 2524
0000b5 2726
0000b6 2928
0000b7 2b2a
0000b8 2d2c
0000b9 2f2e
0000ba 3934
0000bb 433e
0000bc 4d48
0000bd 5752
0000be 5958
0000bf 5b5a
0000c0 5d5c
0000c1 5f5e
0000c2 6160
0000c3 6362
0000c4 6564
0000c5 6766
0000c6 6968
0000c7 6b6a
0000c8 6d6c
0000c9 6f6e
0000ca 7170
0000cb 7372
0000cc 696e
0000cd 5f64
0000ce 555a
0000cf 4b50
0000d0 4146
0000d1 373c                      .db  31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 51, 56, 61, 66, 71, 76, 81, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 109, 104, 99, 94, 89, 84, 70000d2 2221
0000d3 2423
0000d4 2625
0000d5 2827
0000d6 2a29
0000d7 2c2b
0000d8 2e2d
0000d9 302f
0000da 3a35
0000db 443f
0000dc 4e49
0000dd 5853
0000de 5a59
0000df 5c5b
0000e0 5e5d
0000e1 605f
0000e2 6261
0000e3 6463
0000e4 6665
0000e5 6867
0000e6 6a69
0000e7 6c6b
0000e8 6e6d
0000e9 706f
0000ea 7271
0000eb 7473
0000ec 6a6f
0000ed 6065
0000ee 565b
0000ef 4c51
0000f0 4247
0000f1 383d                      9, 74, 69, 64, 59, 54
0000f2 2322
0000f3 2524
0000f4 2726
0000f5 2928
0000f6 2b2a
0000f7 2d2c
0000f8 2f2e
0000f9 3130
0000fa 3b36
0000fb 4540
0000fc 4f4a
0000fd 5954
0000fe 5b5a
0000ff 5d5c
000100 5f5e
000101 6160
000102 6362
000103 6564
000104 6766
000105 6968
000106 6b6a
000107 6d6c
000108 6f6e
000109 7170
00010a 7372
00010b 7574
00010c 6b70
00010d 6166
00010e 575c
00010f 4d52
000110 4348
000111 393e                      .db  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 57, 62, 67, 72, 77, 82, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 110, 105, 100, 95, 90, 85,000112 2423
000113 2625
000114 2827
000115 2a29
000116 2c2b
000117 2e2d
000118 302f
000119 3231
00011a 3c37
00011b 4641
00011c 504b
00011d 5a55
00011e 5c5b
00011f 5e5d
000120 605f
000121 6261
000122 6463
000123 6665
000124 6867
000125 6a69
000126 6c6b
000127 6e6d
000128 706f
000129 7271
00012a 7473
00012b 7675
00012c 6c71
00012d 6267
00012e 585d
00012f 4e53
000130 4449
000131 3a3f                       80, 75, 70, 65, 60, 55
000132 2524
000133 2726
000134 2928
000135 2b2a
000136 2d2c
000137 2f2e
000138 3130
000139 3332
00013a 3d38
00013b 4742
00013c 514c
00013d 5b56
00013e 5d5c
00013f 5f5e
000140 6160
000141 6362
000142 6564
000143 6766
000144 6968
000145 6b6a
000146 6d6c
000147 6f6e
000148 7170
000149 7372
00014a 7574
00014b 7776
00014c 6d72
00014d 6368
00014e 595e
00014f 4f54
000150 454a
000151 3b40                      .db  33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 58, 63, 68, 73, 78, 83, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 111, 106, 101, 96, 91, 86000152 2625
000153 2827
000154 2a29
000155 2c2b
000156 2e2d
000157 302f
000158 3231
000159 3433
00015a 3e39
00015b 4843
00015c 524d
00015d 5c57
00015e 5e5d
00015f 605f
000160 6261
000161 6463
000162 6665
000163 6867
000164 6a69
000165 6c6b
000166 6e6d
000167 706f
000168 7271
000169 7473
00016a 7675
00016b 7877
00016c 6e73
00016d 6469
00016e 5a5f
00016f 5055
000170 464b
000171 3c41                      , 81, 76, 71, 66, 61, 56
000172 2726
000173 2928
000174 2b2a
000175 2d2c
000176 2f2e
000177 3130
000178 3332
000179 3534
00017a 3f3a
00017b 4944
00017c 534e
00017d 5d58
00017e 5f5e
00017f 6160
000180 6362
000181 6564
000182 6766
000183 6968
000184 6b6a
000185 6d6c
000186 6f6e
000187 7170
000188 7372
000189 7574
00018a 7776
00018b 7978
00018c 6f74
00018d 656a
00018e 5b60
00018f 5156
000190 474c
000191 3d42                      .db  34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 54, 59, 64, 69, 74, 79, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 112, 107, 102, 97, 92, 8000192 2827
000193 2a29
000194 2c2b
000195 2e2d
000196 302f
000197 3231
000198 3433
000199 3635
00019a 403b
00019b 4a45
00019c 544f
00019d 5e59
00019e 605f
00019f 6261
0001a0 6463
0001a1 6665
0001a2 6867
0001a3 6a69
0001a4 6c6b
0001a5 6e6d
0001a6 706f
0001a7 7271
0001a8 7473
0001a9 7675
0001aa 7877
0001ab 7a79
0001ac 7075
0001ad 666b
0001ae 5c61
0001af 5257
0001b0 484d
0001b1 3e43                      7, 82, 77, 72, 67, 62, 57
0001b2 2928
0001b3 2b2a
0001b4 2d2c
0001b5 2f2e
0001b6 3130
0001b7 3332
0001b8 3534
0001b9 3736
0001ba 413c
0001bb 4b46
0001bc 5550
0001bd 5f5a
0001be 6160
0001bf 6362
0001c0 6564
0001c1 6766
0001c2 6968
0001c3 6b6a
0001c4 6d6c
0001c5 6f6e
0001c6 7170
0001c7 7372
0001c8 7574
0001c9 7776
0001ca 7978
0001cb 7b7a
0001cc 7176
0001cd 676c
0001ce 5d62
0001cf 5358
0001d0 494e
0001d1 3f44                      .db  35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 60, 65, 70, 75, 80, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 113, 108, 103, 98, 93, 0001d2 2a29
0001d3 2c2b
0001d4 2e2d
0001d5 302f
0001d6 3231
0001d7 3433
0001d8 3635
0001d9 3837
0001da 423d
0001db 4c47
0001dc 5651
0001dd 605b
0001de 6261
0001df 6463
0001e0 6665
0001e1 6867
0001e2 6a69
0001e3 6c6b
0001e4 6e6d
0001e5 706f
0001e6 7271
0001e7 7473
0001e8 7675
0001e9 7877
0001ea 7a79
0001eb 7c7b
0001ec 7277
0001ed 686d
0001ee 5e63
0001ef 5459
0001f0 4a4f
0001f1 4045                      88, 83, 78, 73, 68, 63, 58
0001f2 2b2a
0001f3 2d2c
0001f4 2f2e
0001f5 3130
0001f6 3332
0001f7 3534
0001f8 3736
0001f9 3938
0001fa 433e
0001fb 4d48
0001fc 5752
0001fd 615c
0001fe 6362
0001ff 6564
000200 6766
000201 6968
000202 6b6a
000203 6d6c
000204 6f6e
000205 7170
000206 7372
000207 7574
000208 7776
000209 7978
00020a 7b7a
00020b 7d7c
00020c 7378
00020d 696e
00020e 5f64
00020f 555a
000210 4b50
000211 4146                      .db  36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 61, 66, 71, 76, 81, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 114, 109, 104, 99, 94,000212 2c2b
000213 2e2d
000214 302f
000215 3231
000216 3433
000217 3635
000218 3837
000219 3a39
00021a 443f
00021b 4e49
00021c 5853
00021d 625d
00021e 6463
00021f 6665
000220 6867
000221 6a69
000222 6c6b
000223 6e6d
000224 706f
000225 7271
000226 7473
000227 7675
000228 7877
000229 7a79
00022a 7c7b
00022b 7e7d
00022c 7479
00022d 6a6f
00022e 6065
00022f 565b
000230 4c51
000231 4247                       89, 84, 79, 74, 69, 64, 59
000232 2d2c
000233 2f2e
000234 3130
000235 3332
000236 3534
000237 3736
000238 3938
000239 3b3a
00023a 4540
00023b 4f4a
00023c 5954
00023d 635e
00023e 6564
00023f 6766
000240 6968
000241 6b6a
000242 6d6c
000243 6f6e
000244 7170
000245 7372
000246 7574
000247 7776
000248 7978
000249 7b7a
00024a 7d7c
00024b 7f7e
00024c 757a
00024d 6b70
00024e 6166
00024f 575c
000250 4d52
000251 4348                      .db  37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 62, 67, 72, 77, 82, 87, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 115, 110, 105, 100, 9000252 3433
000253 3635
000254 3837
000255 3a39
000256 3635
000257 3837
000258 3a39
000259 3c3b
00025a 4641
00025b 504b
00025c 5a55
00025d 615f
00025e 6362
00025f 6564
000260 6766
000261 6968
000262 6b6a
000263 6d6c
000264 6f6e
000265 7170
000266 7372
000267 7574
000268 7776
000269 7978
00026a 7b7a
00026b 7d7c
00026c 7378
00026d 696e
00026e 5f64
00026f 555a
000270 4b50
000271 4146                      5, 90, 85, 80, 75, 70, 65, 60
000272 3b3a
000273 3d3c
000274 3f3e
000275 4140
000276 3736
000277 3938
000278 3b3a
000279 3d3c
00027a 4742
00027b 514c
00027c 5b56
00027d 5f60
00027e 6160
00027f 6362
000280 6564
000281 6766
000282 6968
000283 6b6a
000284 6d6c
000285 6f6e
000286 7170
000287 7372
000288 7574
000289 7776
00028a 7978
00028b 7b7a
00028c 7176
00028d 676c
00028e 5d62
00028f 5358
000290 494e
000291 3f44                      .db  38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 58, 63, 68, 73, 78, 83, 88, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 116, 111, 106, 101, 000292 4241
000293 4443
000294 4645
000295 4847
000296 3837
000297 3a39
000298 3c3b
000299 3e3d
00029a 4843
00029b 524d
00029c 5c57
00029d 5d61
00029e 5f5e
00029f 6160
0002a0 6362
0002a1 6564
0002a2 6766
0002a3 6968
0002a4 6b6a
0002a5 6d6c
0002a6 6f6e
0002a7 7170
0002a8 7372
0002a9 7574
0002aa 7776
0002ab 7978
0002ac 6f74
0002ad 656a
0002ae 5b60
0002af 5156
0002b0 474c
0002b1 3d42                      96, 91, 86, 81, 76, 71, 66, 61
0002b2 4948
0002b3 4b4a
0002b4 4d4c
0002b5 4f4e
0002b6 3736
0002b7 3938
0002b8 3b3a
0002b9 3d3c
0002ba 4742
0002bb 514c
0002bc 5b56
0002bd 5b60
0002be 5d5c
0002bf 5f5e
0002c0 6160
0002c1 6362
0002c2 6564
0002c3 6766
0002c4 6968
0002c5 6b6a
0002c6 6d6c
0002c7 6f6e
0002c8 7170
0002c9 7372
0002ca 7574
0002cb 7776
0002cc 6d72
0002cd 6368
0002ce 595e
0002cf 4f54
0002d0 454a
0002d1 3b40                      .db  39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 64, 69, 74, 79, 84, 89, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 117, 112, 107, 102,0002d2 4241
0002d3 4443
0002d4 4645
0002d5 4847
0002d6 3635
0002d7 3837
0002d8 3a39
0002d9 3c3b
0002da 4641
0002db 504b
0002dc 5a55
0002dd 595f
0002de 5b5a
0002df 5d5c
0002e0 5f5e
0002e1 6160
0002e2 6362
0002e3 6564
0002e4 6766
0002e5 6968
0002e6 6b6a
0002e7 6d6c
0002e8 6f6e
0002e9 7170
0002ea 7372
0002eb 7574
0002ec 6b70
0002ed 6166
0002ee 575c
0002ef 4d52
0002f0 4348
0002f1 393e                       97, 92, 87, 82, 77, 72, 67, 62
0002f2 3b3a
0002f3 3d3c
0002f4 3f3e
0002f5 4140
0002f6 3534
0002f7 3736
0002f8 3938
0002f9 3b3a
0002fa 4540
0002fb 4f4a
0002fc 5954
0002fd 575e
0002fe 5958
0002ff 5b5a
000300 5d5c
000301 5f5e
000302 6160
000303 6362
000304 6564
000305 6766
000306 6968
000307 6b6a
000308 6d6c
000309 6f6e
00030a 7170
00030b 7372
00030c 696e
00030d 5f64
00030e 555a
00030f 4b50
000310 4146
000311 373c                      .db  40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 65, 70, 75, 80, 85, 90, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 118, 113, 108, 103000312 3433
000313 3635
000314 3837
000315 3a39
000316 3433
000317 3635
000318 3837
000319 3a39
00031a 443f
00031b 4e49
00031c 5853
00031d 555d
00031e 5756
00031f 5958
000320 5b5a
000321 5d5c
000322 5f5e
000323 6160
000324 6362
000325 6564
000326 6766
000327 6968
000328 6b6a
000329 6d6c
00032a 6f6e
00032b 7170
00032c 676c
00032d 5d62
00032e 5358
00032f 494e
000330 3f44
000331 353a                      , 98, 93, 88, 83, 78, 73, 68, 63
000332 2d2c
000333 2f2e
000334 3130
000335 3332
000336 3332
000337 3534
000338 3736
000339 3938
00033a 433e
00033b 4d48
00033c 5752
00033d 535c
00033e 5554
00033f 5756
000340 5958
000341 5b5a
000342 5d5c
000343 5f5e
000344 6160
000345 6362
000346 6564
000347 6766
000348 6968
000349 6b6a
00034a 6d6c
00034b 6f6e
00034c 656a
00034d 5b60
00034e 5156
00034f 474c
000350 3d42
000351 3338                      .db  41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 66, 71, 76, 81, 86, 91, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 119, 114, 109, 10000352 2c2b
000353 2e2d
000354 302f
000355 3231
000356 3231
000357 3433
000358 3635
000359 3837
00035a 423d
00035b 4c47
00035c 5651
00035d 515b
00035e 5352
00035f 5554
000360 5756
000361 5958
000362 5b5a
000363 5d5c
000364 5f5e
000365 6160
000366 6362
000367 6564
000368 6766
000369 6968
00036a 6b6a
00036b 6d6c
00036c 6368
00036d 595e
00036e 4f54
00036f 454a
000370 3b40
000371 3136                      4, 99, 94, 89, 84, 79, 74, 69, 64
000372 2b2a
000373 2d2c
000374 2f2e
000375 3130
000376 3130
000377 3332
000378 3534
000379 3736
00037a 413c
00037b 4b46
00037c 5550
00037d 4f5a
00037e 5150
00037f 5352
000380 5554
000381 5756
000382 5958
000383 5b5a
000384 5d5c
000385 5f5e
000386 6160
000387 6362
000388 6564
000389 6766
00038a 6968
00038b 6b6a
00038c 6166
00038d 575c
00038e 4d52
00038f 4348
000390 393e
000391 2f34                      .db  42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 67, 72, 77, 82, 87, 92, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 120, 115, 110, 1000392 2a29
000393 2c2b
000394 2e2d
000395 302f
000396 302f
000397 3231
000398 3433
000399 3635
00039a 403b
00039b 4a45
00039c 544f
00039d 4d59
00039e 4f4e
00039f 5150
0003a0 5352
0003a1 5554
0003a2 5756
0003a3 5958
0003a4 5b5a
0003a5 5d5c
0003a6 5f5e
0003a7 6160
0003a8 6362
0003a9 6564
0003aa 6766
0003ab 6968
0003ac 5f64
0003ad 555a
0003ae 4b50
0003af 4146
0003b0 373c
0003b1 2d32                      05, 100, 95, 90, 85, 80, 75, 70, 65
0003b2 2928
0003b3 2b2a
0003b4 2d2c
0003b5 2f2e
0003b6 2f2e
0003b7 3130
0003b8 3332
0003b9 3534
0003ba 3f3a
0003bb 4944
0003bc 534e
0003bd 4b58
0003be 4d4c
0003bf 4f4e
0003c0 5150
0003c1 5352
0003c2 5554
0003c3 5756
0003c4 5958
0003c5 5b5a
0003c6 5d5c
0003c7 5f5e
0003c8 6160
0003c9 6362
0003ca 6564
0003cb 6766
0003cc 5d62
0003cd 5358
0003ce 494e
0003cf 3f44
0003d0 353a
0003d1 2b30                      .db  43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 68, 73, 78, 83, 88, 93, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 121, 116, 111, 0003d2 2827
0003d3 2a29
0003d4 2c2b
0003d5 2e2d
0003d6 2e2d
0003d7 302f
0003d8 3231
0003d9 3433
0003da 3e39
0003db 4843
0003dc 524d
0003dd 4957
0003de 4b4a
0003df 4d4c
0003e0 4f4e
0003e1 5150
0003e2 5352
0003e3 5554
0003e4 5756
0003e5 5958
0003e6 5b5a
0003e7 5d5c
0003e8 5f5e
0003e9 6160
0003ea 6362
0003eb 6564
0003ec 5b60
0003ed 5156
0003ee 474c
0003ef 3d42
0003f0 3338
0003f1 292e                      106, 101, 96, 91, 86, 81, 76, 71, 66
0003f2 2726
0003f3 2928
0003f4 2b2a
0003f5 2d2c
0003f6 2d2c
0003f7 2f2e
0003f8 3130
0003f9 3332
0003fa 3d38
0003fb 4742
0003fc 514c
0003fd 4756
0003fe 4948
0003ff 4b4a
000400 4d4c
000401 4f4e
000402 5150
000403 5352
000404 5554
000405 5756
000406 5958
000407 5b5a
000408 5d5c
000409 5f5e
00040a 6160
00040b 6362
00040c 595e
00040d 4f54
00040e 454a
00040f 3b40
000410 3136
000411 272c                      .db  44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 64, 69, 74, 79, 84, 89, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 122, 117, 112,000412 2625
000413 2827
000414 2a29
000415 2c2b
000416 2c2b
000417 2e2d
000418 302f
000419 3231
00041a 3c37
00041b 4641
00041c 504b
00041d 4555
00041e 4746
00041f 4948
000420 4b4a
000421 4d4c
000422 4f4e
000423 5150
000424 5352
000425 5554
000426 5756
000427 5958
000428 5b5a
000429 5d5c
00042a 5f5e
00042b 6160
00042c 575c
00042d 4d52
00042e 4348
00042f 393e
000430 2f34
000431 252a                       107, 102, 97, 92, 87, 82, 77, 72, 67
000432 2524
000433 2726
000434 2928
000435 2b2a
000436 2b2a
000437 2d2c
000438 2f2e
000439 3130
00043a 3b36
00043b 4540
00043c 4f4a
00043d 4354
00043e 4544
00043f 4746
000440 4948
000441 4b4a
000442 4d4c
000443 4f4e
000444 5150
000445 5352
000446 5554
000447 5756
000448 5958
000449 5b5a
00044a 5d5c
00044b 5f5e
00044c 555a
00044d 4b50
00044e 4146
00044f 373c
000450 2d32
000451 2328                      .db  51, 52, 53, 54, 55, 56, 57, 58, 53, 54, 55, 56, 57, 58, 59, 60, 65, 70, 75, 80, 85, 90, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 120, 115, 110, 1000452 2827
000453 2a29
000454 2c2b
000455 2e2d
000456 2f2e
000457 3130
000458 3332
000459 3534
00045a 3736
00045b 3738
00045c 3536
00045d 3334
00045e 3132
00045f 4530
000460 4645
000461 4847
000462 4a49
000463 4c4b
000464 4e4d
000465 504f
000466 5251
000467 5453
000468 5655
000469 5857
00046a 5a59
00046b 5c5b
00046c 5e5d
00046d 605f
00046e 4061
00046f 3e3f
000470 3c3d
000471 3a3b                      05, 100, 95, 90, 85, 80, 75, 70, 65
000472 2b2a
000473 2d2c
000474 2f2e
000475 3130
000476 302f
000477 3231
000478 3433
000479 3635
00047a 3837
00047b 3839
00047c 3637
00047d 3435
00047e 3233
00047f 4331
000480 4342
000481 4544
000482 4746
000483 4948
000484 4b4a
000485 4d4c
000486 4f4e
000487 5150
000488 5352
000489 5554
00048a 5756
00048b 5958
00048c 5b5a
00048d 5d5c
00048e 415e
00048f 3f40
000490 3d3e
000491 3b3c                      .db  58, 59, 60, 61, 62, 63, 64, 65, 54, 55, 56, 57, 58, 59, 60, 61, 66, 71, 76, 81, 86, 91, 96, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 118, 113, 108, 103000492 2e2d
000493 302f
000494 3231
000495 3433
000496 3130
000497 3332
000498 3534
000499 3736
00049a 3938
00049b 393a
00049c 3738
00049d 3536
00049e 3334
00049f 4132
0004a0 403f
0004a1 4241
0004a2 4443
0004a3 4645
0004a4 4847
0004a5 4a49
0004a6 4c4b
0004a7 4e4d
0004a8 504f
0004a9 5251
0004aa 5453
0004ab 5655
0004ac 5857
0004ad 5a59
0004ae 425b
0004af 4041
0004b0 3e3f
0004b1 3c3d                      , 98, 93, 88, 83, 78, 73, 68, 63
0004b2 3130
0004b3 3332
0004b4 3534
0004b5 3736
0004b6 3231
0004b7 3433
0004b8 3635
0004b9 3837
0004ba 3a39
0004bb 3a3b
0004bc 3839
0004bd 3637
0004be 3435
0004bf 3f33
0004c0 3d3c
0004c1 3f3e
0004c2 4140
0004c3 4342
0004c4 4544
0004c5 4746
0004c6 4948
0004c7 4b4a
0004c8 4d4c
0004c9 4f4e
0004ca 5150
0004cb 5352
0004cc 5554
0004cd 5756
0004ce 4358
0004cf 4142
0004d0 3f40
0004d1 3d3e                      .db  65, 66, 67, 68, 69, 70, 71, 72, 55, 56, 57, 58, 59, 60, 61, 62, 67, 72, 77, 82, 87, 92, 97, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 116, 111, 106, 101, 0004d2 3433
0004d3 3635
0004d4 3837
0004d5 3a39
0004d6 3332
0004d7 3534
0004d8 3736
0004d9 3938
0004da 3b3a
0004db 3b3c
0004dc 393a
0004dd 3738
0004de 3536
0004df 3d34
0004e0 3a39
0004e1 3c3b
0004e2 3e3d
0004e3 403f
0004e4 4241
0004e5 4443
0004e6 4645
0004e7 4847
0004e8 4a49
0004e9 4c4b
0004ea 4e4d
0004eb 504f
0004ec 5251
0004ed 5453
0004ee 4455
0004ef 4243
0004f0 4041
0004f1 3e3f                      96, 91, 86, 81, 76, 71, 66, 61
0004f2 3736
0004f3 3938
0004f4 3b3a
0004f5 3d3c
0004f6 3433
0004f7 3635
0004f8 3837
0004f9 3a39
0004fa 3c3b
0004fb 3c3d
0004fc 3a3b
0004fd 3839
0004fe 3637
0004ff 3b35
000500 3736
000501 3938
000502 3b3a
000503 3d3c
000504 3f3e
000505 4140
000506 4342
000507 4544
000508 4746
000509 4948
00050a 4b4a
00050b 4d4c
00050c 4f4e
00050d 5150
00050e 4552
00050f 4344
000510 4142
000511 3f40                      .db  72, 73, 74, 75, 76, 77, 78, 79, 54, 55, 56, 57, 58, 59, 60, 61, 66, 71, 76, 81, 86, 91, 96, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 114, 109, 104, 99, 94,000512 3a39
000513 3c3b
000514 3e3d
000515 403f
000516 3534
000517 3736
000518 3938
000519 3b3a
00051a 3d3c
00051b 3d3e
00051c 3b3c
00051d 393a
00051e 3738
00051f 3936
000520 3433
000521 3635
000522 3837
000523 3a39
000524 3c3b
000525 3e3d
000526 403f
000527 4241
000528 4443
000529 4645
00052a 4847
00052b 4a49
00052c 4c4b
00052d 4e4d
00052e 464f
00052f 4445
000530 4243
000531 4041                       89, 84, 79, 74, 69, 64, 59
000532 3d3c
000533 3f3e
000534 4140
000535 4342
000536 3635
000537 3837
000538 3a39
000539 3c3b
00053a 3e3d
00053b 3e3f
00053c 3c3d
00053d 3a3b
00053e 3839
00053f 3737
000540 3130
000541 3332
000542 3534
000543 3736
000544 3938
000545 3b3a
000546 3d3c
000547 3f3e
000548 4140
000549 4342
00054a 4544
00054b 4746
00054c 4948
00054d 4b4a
00054e 474c
00054f 4546
000550 4344
000551 4142                      .db  65, 66, 67, 68, 69, 70, 71, 72, 53, 54, 55, 56, 57, 58, 59, 60, 65, 70, 75, 80, 85, 90, 95, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 112, 107, 102, 97, 92, 8000552 403f
000553 4241
000554 4443
000555 4645
000556 3736
000557 3938
000558 3b3a
000559 3d3c
00055a 3f3e
00055b 3f40
00055c 3d3e
00055d 3b3c
00055e 393a
00055f 3538
000560 2e2d
000561 302f
000562 3231
000563 3433
000564 3635
000565 3837
000566 3a39
000567 3c3b
000568 3e3d
000569 403f
00056a 4241
00056b 4443
00056c 4645
00056d 4847
00056e 4849
00056f 4647
000570 4445
000571 4243                      7, 82, 77, 72, 67, 62, 57
000572 4342
000573 4544
000574 4746
000575 4948
000576 3e3f
000577 3c3d
000578 3a3b
000579 3839
00057a 3637
00057b 3435
00057c 3233
00057d 3031
00057e 2e2f
00057f 2c2d
000580 2a2b
000581 2829
000582 2627
000583 2425
000584 2223
000585 2021
000586 2221
000587 2423
000588 2625
000589 2827
00058a 403f
00058b 4241
00058c 4443
00058d 4645
00058e 3c47
00058f 3e3d
000590 3e3f
000591 3c3d                      .db  58, 59, 60, 61, 62, 63, 64, 65, 52, 53, 54, 55, 56, 57, 58, 59, 64, 69, 74, 79, 84, 89, 94, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 110, 105, 100, 95, 90, 85,000592 4645
000593 4847
000594 4a49
000595 4c4b
000596 3d3e
000597 3b3c
000598 393a
000599 3738
00059a 3536
00059b 3334
00059c 3132
00059d 2f30
00059e 2d2e
00059f 2b2c
0005a0 292a
0005a1 2728
0005a2 2526
0005a3 2324
0005a4 2122
0005a5 1f20
0005a6 2120
0005a7 2322
0005a8 2524
0005a9 2726
0005aa 3e3d
0005ab 403f
0005ac 4241
0005ad 4443
0005ae 3f45
0005af 4140
0005b0 4142
0005b1 3f40                       80, 75, 70, 65, 60, 55
0005b2 4948
0005b3 4b4a
0005b4 4d4c
0005b5 4f4e
0005b6 3c3d
0005b7 3a3b
0005b8 3839
0005b9 3637
0005ba 3435
0005bb 3233
0005bc 3031
0005bd 2e2f
0005be 2c2d
0005bf 2a2b
0005c0 2829
0005c1 2627
0005c2 2425
0005c3 2223
0005c4 2021
0005c5 1e1f
0005c6 201f
0005c7 2221
0005c8 2423
0005c9 2625
0005ca 3c3b
0005cb 3e3d
0005cc 403f
0005cd 4241
0005ce 4243
0005cf 4443
0005d0 4445
0005d1 4243                      .db  51, 52, 53, 54, 55, 56, 57, 58, 51, 52, 53, 54, 55, 56, 57, 58, 63, 68, 73, 78, 83, 88, 93, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 108, 103, 98, 93, 88, 83, 780005d2 4c4b
0005d3 4e4d
0005d4 504f
0005d5 5251
0005d6 3b3c
0005d7 393a
0005d8 3738
0005d9 3536
0005da 3334
0005db 3132
0005dc 2f30
0005dd 2d2e
0005de 2b2c
0005df 292a
0005e0 2728
0005e1 2526
0005e2 2324
0005e3 2122
0005e4 1f20
0005e5 1d1e
0005e6 1f1e
0005e7 2120
0005e8 2322
0005e9 2524
0005ea 3a39
0005eb 3c3b
0005ec 3e3d
0005ed 403f
0005ee 4541
0005ef 4746
0005f0 4748
0005f1 4546                      , 73, 68, 63, 58, 53
0005f2 4f4e
0005f3 5150
0005f4 5352
0005f5 5554
0005f6 3a3b
0005f7 3839
0005f8 3637
0005f9 3435
0005fa 3233
0005fb 3031
0005fc 2e2f
0005fd 2c2d
0005fe 2a2b
0005ff 2829
000600 2627
000601 2425
000602 2223
000603 2021
000604 1e1f
000605 1c1d
000606 1e1d
000607 201f
000608 2221
000609 2423
00060a 3837
00060b 3a39
00060c 3c3b
00060d 3e3d
00060e 483f
00060f 4a49
000610 4a4b
000611 4849                      .db  44, 45, 46, 47, 48, 49, 50, 51, 50, 51, 52, 53, 54, 55, 56, 57, 62, 67, 72, 77, 82, 87, 92, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 106, 101, 96, 91, 86, 81, 76, 000612 5251
000613 5453
000614 5655
000615 5857
000616 393a
000617 3738
000618 3536
000619 3334
00061a 3132
00061b 2f30
00061c 2d2e
00061d 2b2c
00061e 292a
00061f 2728
000620 2526
000621 2324
000622 2122
000623 1f20
000624 1d1e
000625 1b1c
000626 1d1c
000627 1f1e
000628 2120
000629 2322
00062a 3635
00062b 3837
00062c 3a39
00062d 3c3b
00062e 4b3d
00062f 4d4c
000630 4d4e
000631 4b4c                      71, 66, 61, 56, 51
000632 5554
000633 5756
000634 5958
000635 5b5a
000636 3839
000637 3637
000638 3435
000639 3233
00063a 3031
00063b 2e2f
00063c 2c2d
00063d 2a2b
00063e 2829
00063f 2627
000640 2425
000641 2223
000642 2021
000643 1e1f
000644 1c1d
000645 1a1b
000646 1c1b
000647 1e1d
000648 201f
000649 2221
00064a 3433
00064b 3635
00064c 3837
00064d 3a39
00064e 4e3b
00064f 504f
000650 5051
000651 4e4f                      .db  43, 44, 45, 46, 47, 48, 49, 50, 49, 50, 51, 52, 53, 54, 55, 56, 61, 66, 71, 76, 81, 86, 91, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 104, 99, 94, 89, 84, 79, 74, 69,000652 5251
000653 5453
000654 5655
000655 5857
000656 3738
000657 3536
000658 3334
000659 3132
00065a 2f30
00065b 2d2e
00065c 2b2c
00065d 292a
00065e 2728
00065f 2526
000660 2324
000661 2122
000662 1f20
000663 1d1e
000664 1b1c
000665 191a
000666 1b1a
000667 1d1c
000668 1f1e
000669 2120
00066a 3231
00066b 3433
00066c 3635
00066d 3837
00066e 5139
00066f 5352
000670 5354
000671 5152                       64, 59, 54, 49
000672 4f4e
000673 5150
000674 5352
000675 5554
000676 3637
000677 3435
000678 3233
000679 3031
00067a 2e2f
00067b 2c2d
00067c 2a2b
00067d 2829
00067e 2627
00067f 2425
000680 2223
000681 2021
000682 1e1f
000683 1c1d
000684 1a1b
000685 1819
000686 1a19
000687 1c1b
000688 1e1d
000689 201f
00068a 302f
00068b 3231
00068c 3433
00068d 3635
00068e 5437
00068f 5655
000690 5657
000691 5455                      .db  42, 43, 44, 45, 46, 47, 48, 49, 48, 49, 50, 51, 52, 53, 54, 55, 60, 65, 70, 75, 80, 85, 90, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 102, 97, 92, 87, 82, 77, 72, 67, 6000692 4c4b
000693 4e4d
000694 504f
000695 5251
000696 3536
000697 3334
000698 3132
000699 2f30
00069a 2d2e
00069b 2b2c
00069c 292a
00069d 2728
00069e 2526
00069f 2324
0006a0 2122
0006a1 1f20
0006a2 1d1e
0006a3 1b1c
0006a4 191a
0006a5 1718
0006a6 1918
0006a7 1b1a
0006a8 1d1c
0006a9 1f1e
0006aa 2e2d
0006ab 302f
0006ac 3231
0006ad 3433
0006ae 5735
0006af 5958
0006b0 595a
0006b1 5758                      2, 57, 52, 47
0006b2 4948
0006b3 4b4a
0006b4 4d4c
0006b5 4f4e
0006b6 3435
0006b7 3233
0006b8 3031
0006b9 2e2f
0006ba 2c2d
0006bb 2a2b
0006bc 2829
0006bd 2627
0006be 2425
0006bf 2223
0006c0 2021
0006c1 1e1f
0006c2 1c1d
0006c3 1a1b
0006c4 1819
0006c5 1617
0006c6 1817
0006c7 1a19
0006c8 1c1b
0006c9 1e1d
0006ca 2c2b
0006cb 2e2d
0006cc 302f
0006cd 3231
0006ce 5a33
0006cf 5c5b
0006d0 5c5d
0006d1 5a5b                      .db  41, 42, 43, 44, 45, 46, 47, 48, 47, 48, 49, 50, 51, 52, 53, 54, 59, 64, 69, 74, 79, 84, 89, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 100, 95, 90, 85, 80, 75, 70, 65, 60,0006d2 4645
0006d3 4847
0006d4 4a49
0006d5 4c4b
0006d6 3334
0006d7 3132
0006d8 2f30
0006d9 2d2e
0006da 2b2c
0006db 292a
0006dc 2728
0006dd 2526
0006de 2324
0006df 2122
0006e0 1f20
0006e1 1d1e
0006e2 1b1c
0006e3 191a
0006e4 1718
0006e5 1516
0006e6 1716
0006e7 1918
0006e8 1b1a
0006e9 1d1c
0006ea 2a29
0006eb 2c2b
0006ec 2e2d
0006ed 302f
0006ee 5d31
0006ef 5f5e
0006f0 5f60
0006f1 5d5e                       55, 50, 45
0006f2 4342
0006f3 4544
0006f4 4746
0006f5 4948
0006f6 3233
0006f7 3031
0006f8 2e2f
0006f9 2c2d
0006fa 2a2b
0006fb 2829
0006fc 2627
0006fd 2425
0006fe 2223
0006ff 2021
000700 1e1f
000701 1c1d
000702 1a1b
000703 1819
000704 1617
000705 1415
000706 1615
000707 1817
000708 1a19
000709 1c1b
00070a 2827
00070b 2a29
00070c 2c2b
00070d 2e2d
00070e 5a2f
00070f 6861
000710 686f
000711 5a61                      .db  40, 41, 42, 43, 44, 45, 46, 47, 46, 47, 48, 49, 50, 51, 52, 53, 58, 63, 68, 73, 78, 83, 88, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 98, 93, 88, 83, 78, 73, 68, 63, 58, 53000712 403f
000713 4241
000714 4443
000715 4645
000716 3132
000717 2f30
000718 2d2e
000719 2b2c
00071a 292a
00071b 2728
00071c 2526
00071d 2324
00071e 2122
00071f 1f20
000720 1d1e
000721 1b1c
000722 191a
000723 1718
000724 1516
000725 1314
000726 1514
000727 1716
000728 1918
000729 1b1a
00072a 2625
00072b 2827
00072c 2a29
00072d 2c2b
00072e 572d
00072f 655e
000730 656c
000731 575e                      , 48, 43
000732 3d3c
000733 3f3e
000734 4140
000735 4342
000736 3031
000737 2e2f
000738 2c2d
000739 2a2b
00073a 2829
00073b 2627
00073c 2425
00073d 2223
00073e 2021
00073f 1e1f
000740 1c1d
000741 1a1b
000742 1819
000743 1617
000744 1415
000745 1213
000746 1413
000747 1615
000748 1817
000749 1a19
00074a 2423
00074b 2625
00074c 2827
00074d 2a29
00074e 542b
00074f 625b
000750 6269
000751 545b                      .db  39, 40, 41, 42, 43, 44, 45, 46, 45, 46, 47, 48, 49, 50, 51, 52, 57, 62, 67, 72, 77, 82, 87, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 96, 91, 86, 81, 76, 71, 66, 61, 56, 51, 000752 3a39
000753 3c3b
000754 3e3d
000755 403f
000756 2f30
000757 2d2e
000758 2b2c
000759 292a
00075a 2728
00075b 2526
00075c 2324
00075d 2122
00075e 1f20
00075f 1d1e
000760 1b1c
000761 191a
000762 1718
000763 1516
000764 1314
000765 1112
000766 1312
000767 1514
000768 1716
000769 1918
00076a 2221
00076b 2423
00076c 2625
00076d 2827
00076e 5129
00076f 5f58
000770 5f66
000771 5158                      46, 41
000772 3736
000773 3938
000774 3b3a
000775 3d3c
000776 2e2f
000777 2c2d
000778 2a2b
000779 2829
00077a 2627
00077b 2425
00077c 2223
00077d 2021
00077e 1e1f
00077f 1c1d
000780 1a1b
000781 1819
000782 1617
000783 1415
000784 1213
000785 1011
000786 1211
000787 1413
000788 1615
000789 1817
00078a 201f
00078b 2221
00078c 2423
00078d 2625
00078e 4e27
00078f 5c55
000790 5c63
000791 4e55                      .db  38, 39, 40, 41, 42, 43, 44, 45, 44, 45, 46, 47, 48, 49, 50, 51, 56, 61, 66, 71, 76, 81, 86, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 94, 89, 84, 79, 74, 69, 64, 59, 54, 49, 44000792 3433
000793 3635
000794 3837
000795 3a39
000796 2d2e
000797 2b2c
000798 292a
000799 2728
00079a 2526
00079b 2324
00079c 2122
00079d 1f20
00079e 1d1e
00079f 1b1c
0007a0 191a
0007a1 1718
0007a2 1516
0007a3 1314
0007a4 1112
0007a5 0f10
0007a6 1110
0007a7 1312
0007a8 1514
0007a9 1716
0007aa 1e1d
0007ab 201f
0007ac 2221
0007ad 2423
0007ae 4b25
0007af 5952
0007b0 5960
0007b1 4b52                      , 39
0007b2 3130
0007b3 3332
0007b4 3534
0007b5 3736
0007b6 2c2d
0007b7 2a2b
0007b8 2829
0007b9 2627
0007ba 2425
0007bb 2223
0007bc 2021
0007bd 1e1f
0007be 1c1d
0007bf 1a1b
0007c0 1819
0007c1 1617
0007c2 1415
0007c3 1213
0007c4 1011
0007c5 0e0f
0007c6 100f
0007c7 1211
0007c8 1413
0007c9 1615
0007ca 1c1b
0007cb 1e1d
0007cc 201f
0007cd 2221
0007ce 4823
0007cf 564f
0007d0 565d
0007d1 484f                      .db  37, 38, 39, 40, 41, 42, 43, 44, 43, 44, 45, 46, 47, 48, 49, 50, 55, 60, 65, 70, 75, 80, 85, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 92, 87, 82, 77, 72, 67, 62, 57, 52, 47, 420007d2 2e2d
0007d3 302f
0007d4 3231
0007d5 3433
0007d6 2b2c
0007d7 292a
0007d8 2728
0007d9 2526
0007da 2324
0007db 2122
0007dc 1f20
0007dd 1d1e
0007de 1b1c
0007df 191a
0007e0 1718
0007e1 1516
0007e2 1314
0007e3 1112
0007e4 0f10
0007e5 0d0e
0007e6 0f0e
0007e7 1110
0007e8 1312
0007e9 1514
0007ea 1a19
0007eb 1c1b
0007ec 1e1d
0007ed 201f
0007ee 4521
0007ef 534c
0007f0 535a
0007f1 454c                      , 37
0007f2 2b2a
0007f3 2d2c
0007f4 2f2e
0007f5 3130
0007f6 2a2b
0007f7 2829
0007f8 2627
0007f9 2425
0007fa 2223
0007fb 2021
0007fc 1e1f
0007fd 1c1d
0007fe 1a1b
0007ff 1819
000800 1617
000801 1415
000802 1213
000803 1011
000804 0e0f
000805 0c0d
000806 0e0d
000807 100f
000808 1211
000809 1413
00080a 1817
00080b 1a19
00080c 1c1b
00080d 1e1d
00080e 421f
00080f 5049
000810 5057
000811 4249                      .db  36, 37, 38, 39, 40, 41, 42, 43, 42, 43, 44, 45, 46, 47, 48, 49, 54, 59, 64, 69, 74, 79, 84, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 45, 40000812 2827
000813 2a29
000814 2c2b
000815 2e2d
000816 292a
000817 2728
000818 2526
000819 2324
00081a 2122
00081b 1f20
00081c 1d1e
00081d 1b1c
00081e 191a
00081f 1718
000820 1516
000821 1314
000822 1112
000823 0f10
000824 0d0e
000825 0b0c
000826 0d0c
000827 0f0e
000828 1110
000829 1312
00082a 1615
00082b 1817
00082c 1a19
00082d 1c1b
00082e 3f1d
00082f 4d46
000830 4d54
000831 3f46                      , 35
000832 2524
000833 2726
000834 2928
000835 2b2a
000836 2829
000837 2627
000838 2425
000839 2223
00083a 2021
00083b 1e1f
00083c 1c1d
00083d 1a1b
00083e 1819
00083f 1617
000840 1415
000841 1213
000842 1011
000843 0e0f
000844 0c0d
000845 0a0b
000846 0c0b
000847 0e0d
000848 100f
000849 1211
00084a 1413
00084b 1615
00084c 1817
00084d 1a19
00084e 3c1b
00084f 4a43
000850 4a51
000851 3c43                      .db  39, 40, 41, 42, 43, 44, 45, 46, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 55, 54, 53, 52, 51, 50, 49, 48, 69, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 64, 63, 62, 61, 60, 59000852 2524
000853 2726
000854 2928
000855 2b2a
000856 2829
000857 2627
000858 2425
000859 2223
00085a 2021
00085b 1e1f
00085c 1c1d
00085d 1a1b
00085e 1819
00085f 1617
000860 1415
000861 1213
000862 1011
000863 0e0f
000864 0c0d
000865 0a0b
000866 0c0b
000867 0e0d
000868 100f
000869 1211
00086a 1413
00086b 1615
00086c 1817
00086d 1a19
00086e 3c1b
00086f 4a43
000870 4a51
000871 3c43                      , 58
                                             ;  .INCLUDE    "mountain_debug.inc"
                                 
                                 
                                 ; Keypad Convert Dictionary
                                 KEYPAD_CONVERT_KEY:
000872 deee
000873 7ebe                                  .db 0xEE, 0xDE, 0xBE, 0x7E
000874 dded
000875 7dbd                                  .db 0xED, 0xDD, 0xBD, 0x7D
000876 dbeb
000877 7bbb                                  .db 0xEB, 0xDB, 0xBB, 0x7B
000878 d7e7
000879 77b7                                  .db 0xE7, 0xD7, 0xB7, 0x77
                                 ; KEYPAD_CONVERT_VALUE:
                                 ;             .db 0x31, 0x32, 0x33, 0x41
                                 ;             .db 0x34, 0x35, 0x36, 0x42
                                 ;             .db 0x37, 0x38, 0x39, 0x43
                                 ;             .db 0x2A, 0x30, 0x23, 0x44
                                 KEYPAD_CONVERT_VALUE:
00087a 0201
00087b 0a03                                  .db 0x01, 0x02, 0x03, 0x0A
00087c 0504
00087d 0b06                                  .db 0x04, 0x05, 0x06, 0x0B
00087e 0807
00087f 0c09                                  .db 0x07, 0x08, 0x09, 0x0C
000880 000e
000881 0d0f                                  .db 0x0E, 0x00, 0x0F, 0x0D
                                 
                                 
                                 ;   Some strings for display
                                 STRING_INPUT_X:
000882 4e49
000883 5550
000884 2054
000885 3a58
000886 0020                                  .db "INPUT X: ",0
                                 STRING_INPUT_Y:
000887 4e49
000888 5550
000889 2054
00088a 3a59
00088b 0020                                  .db "INPUT Y: ",0
                                 STRING_INPUT_OV:
00088c 4e49
00088d 5550
00088e 2054
00088f 564f
000890 0020                                  .db "INPUT OV ",0
                                 STRING_TRY_AGAIN:
000891 5254
000892 2059
000893 4741
000894 4941
000895 004e                                  .db "TRY AGAIN",0
                                 STRING_STATUS_G:
000896 5453
000897 5441
000898 5355
000899 203a
00089a 5247
00089b 554f
00089c 444e
00089d 0000                                  .db "STATUS: GROUND",0,0
                                 STRING_STATUS_S:
00089e 5453
00089f 5441
0008a0 5355
0008a1 203a
0008a2 4553
0008a3 5241
0008a4 4843
0008a5 0000                                  .db "STATUS: SEARCH",0,0
                                 STRING_STATUS_R:
0008a6 5453
0008a7 5441
0008a8 5355
0008a9 203a
0008aa 4552
0008ab 5554
0008ac 4e52
0008ad 0000                                  .db "STATUS: RETURN",0,0
                                 STRING_STATUS_I:
0008ae 5453
0008af 5441
0008b0 5355
0008b1 203a
0008b2 4e49
0008b3 5053
0008b4 4345
0008b5 0054                                  .db "STATUS: INSPECT",0
                                 STRING_STATUS_T:
0008b6 5453
0008b7 5441
0008b8 5355
0008b9 203a
0008ba 4154
0008bb 454b
0008bc 464f
0008bd 0046                                  .db "STATUS: TAKEOFF",0
                                 STRING_STATUS_L:
0008be 5453
0008bf 5441
0008c0 5355
0008c1 203a
0008c2 414c
0008c3 444e
0008c4 4e49
0008c5 0047                                  .db "STATUS: LANDING",0
                                 STRING_ACCIDENT:
0008c6 4341
0008c7 4943
0008c8 4544
0008c9 544e
0008ca 203a
0008cb 0000                                  .db "ACCIDENT: ",0,0
                                 STRING_NOT_FOUND:
0008cc 4f4e
0008cd 2054
0008ce 4f46
0008cf 4e55
0008d0 0044                                  .db "NOT FOUND",0
                                 STRING_X:
0008d1 3a58
0008d2 0000                                  .db "X:",0,0
                                 STRING_Y:
0008d3 3a59
0008d4 0000                                  .db "Y:",0,0
                                 STRING_Z:
0008d5 3a5a
0008d6 0000                                  .db "Z:",0,0
                                 STRING_COMMA:
0008d7 002c                                  .db ",",0
                                 
                                 ;================================ Interupt initialization ==================================
                                 
                                 .MACRO     INIT_BUTTON_RIGHT
                                 ; initialize interupt of right button
                                             IN          TEMP1,      DDRD
                                             ANDI        TEMP1,      0b11111110
                                             OUT         DDRD,       TEMP1                    ; set PD0 input mode
                                             IN          TEMP1,      PORTD
                                             ORI         TEMP1,      0b00000001
                                             OUT         PORTD,      TEMP1                    ; active pull-up resister of PD0 and PD1
                                             LDI         TEMP1,      (2<<ISC00)               ; set INT0 as falling edge triggered interupt
                                             STS         EICRA,      TEMP1
                                             ; IN          TEMP1,      EIMSK                    ; enalbe INT0
                                             ; ORI         TEMP1,      (1<<INT0)
                                             ; OUT         EIMSK,      TEMP1
                                 .ENDMACRO
                                 
                                 
                                 .MACRO     INIT_BUTTON_LEFT
                                 ; initialize interupt of left button
                                             IN          TEMP1,      DDRD
                                             ANDI        TEMP1,      0b11111101
                                             OUT         DDRD,       TEMP1                    ; set PD1 input mode
                                             IN          TEMP1,      PORTD
                                             ORI         TEMP1,      0b00000010
                                             OUT         PORTD,      TEMP1                    ; active pull-up resister of PD1
                                             LDI         TEMP1,      (2<<ISC10)               ; set INT1 as falling edge triggered interupt
                                             STS         EICRA,      TEMP1
                                             ; IN          TEMP1,      EIMSK                    ; enalbe INT1
                                             ; ORI         TEMP1,      (1<<INT1)
                                             ; OUT         EIMSK,      TEMP1
                                 .ENDMACRO
                                 
                                 
                                 .MACRO     INIT_TIME1
                                 ; To generate 1 second by using timer 1
                                 ; Timer1 is 16 bits timer, 2^16 = 65536
                                 ; 65536 * 1/16M s * Clock_Selection = 1s
                                 ; Clock_Selection = 256
                                 ; Therefore: TCCR1B = 0b00000100
                                             LDI         TEMP1,        0b00000000
                                             STS         TCCR1A,       TEMP1         ; Normal mode
                                             LDI         TEMP1,        0b00000100
                                             STS         TCCR1B,       TEMP1         ; Clock selection = 256
                                             LDI         TEMP1,        (1<<TOIE1)
                                             STS         TIMSK1,       TEMP1         ; Overflow enabled
                                 .ENDMACRO
                                 
                                 ;========================================== Delay =============================================
                                 
                                 .MACRO      TEST_DELAY
                                 ; using LED to test Delay
                                 TEST_DELAY_LOOP:
                                             LDI         TEMP1,      0xFF
                                             OUT         PORTC,      TEMP1
                                             LDI         ARG1,       LOW(10000)
                                             LDI         ARG2,       HIGH(10000)
                                             CALL        DELAY
                                             LDI         TEMP1,      0x00
                                             OUT         PORTC,      TEMP1
                                             LDI         ARG1,       LOW(10000)
                                             LDI         ARG2,       HIGH(10000)
                                             CALL        DELAY
                                             JMP         TEST_DELAY_LOOP
                                 .ENDMACRO
                                 
                                 
                                 DELAY:
                                 ; This function is use to generate a delay:
                                 ;           ARG2:ARG1 * 0.1 ms
                                 ; The longest delay it can generate is 6.5 s
                                 ;
                                 ; For example, if you want to generate 1 s delay, you should:
                                 ;           LDI         ARG1,       LOW(10000)
                                 ;           LDI         ARG2,       HIGH(10000)
                                 ;           CALL       DELAY
                                 ;
                                 ; Calculation:
                                 ; Insaid DELAY_IN,  we get:
                                 ;          7 clock cycles * 228 = 1596 clock cycles
                                 ; Inside DELAY_OUT, we get:
                                 ;          (1596 + 5) clock cycles * ARG2:ARG1
                                 ; where     1601 clock cycles = 0.1 ms
0008d8 930f                                  PUSH        ARG1
0008d9 931f                                  PUSH        ARG2
0008da 938f                                  PUSH        TEMP1
0008db 939f                                  PUSH        TEMP2
0008dc e081                                  LDI         TEMP1,      1
0008dd e090                                  LDI         TEMP2,      0
0008de 0f08                                  ADD         ARG1,       TEMP1       ; to make sure delay is ARG2:ARG1 * 0.1 ms
0008df 1f19                                  ADC         ARG2,       TEMP2       ; but not (ARG2:ARG1-1) * 0.1 ms
                                 DELAY_OUT:
0008e0 5001                                  SUBI        ARG1,       1
0008e1 4010                                  SBCI        ARG2,       0
0008e2 f049                                  BREQ        DELAY_END               ; 1 clock cycle if false
0008e3 ee83                                  LDI         TEMP1,      227
                                 DELAY_IN:
0008e4 958a                                  DEC         TEMP1
0008e5 0000                                  NOP
0008e6 0000                                  NOP
0008e7 0000                                  NOP
0008e8 0000                                  NOP
0008e9 f7d1                                  BRNE        DELAY_IN                ; 2 clock cycles if true
0008ea 940c 08e0                             JMP        DELAY_OUT               ; 2 clock cycles
                                 DELAY_END:
0008ec 919f                                  POP         TEMP2
0008ed 918f                                  POP         TEMP1
0008ee 911f                                  POP         ARG2
0008ef 910f                                  POP         ARG1
0008f0 9508                                  RET
                                 
                                 ;==================================== LED driver =========================================
                                 
                                 .MACRO      INIT_LED_IO
                                 ;           LED Initialization:
                                 ;           LED0 -- PG0
                                 ;           LED1 -- PG1
                                 ;           LED2 -- PC0
                                 ;           LED3 -- PC1
                                 ;           LED4 -- PC2
                                 ;           LED5 -- PC3
                                 ;           LED6 -- PC4
                                 ;           LED7 -- PC5
                                 ;           LED8 -- PC6
                                 ;           LED9 -- PC7
                                             LDI         TEMP1,      0b11111111
                                             OUT         DDRC,       TEMP1           ; PC7~PC0 output
                                             IN          TEMP1,      DDRG
                                             ORI         TEMP1,      0b00000011      ; PG1~PG0 output
                                             OUT         DDRG,       TEMP1
                                 .ENDMACRO
                                 
                                 
                                 TOGGLE_LED:
0008f1 938f                                  PUSH        TEMP1
0008f2 939f                                  PUSH        TEMP2
0008f3 b188                                  IN          TEMP1,      PORTC
0008f4 ef9f                                  LDI         TEMP2,      0xFF
0008f5 1b98                                  SUB         TEMP2,      TEMP1
0008f6 b998                                  OUT         PORTC,      TEMP2
0008f7 919f                                  POP         TEMP2
0008f8 918f                                  POP         TEMP1
0008f9 9508                                  RET
                                 
                                 
                                 CLR_LED:
0008fa 938f                                  PUSH        TEMP1
0008fb e080                                  LDI         TEMP1,      0b00000000
0008fc b988                                  OUT         PORTC,      TEMP1
0008fd b384                                  IN          TEMP1,      PORTG
0008fe 7f8c                                  ANDI        TEMP1,      0b11111100
0008ff bb84                                  OUT         PORTG,      TEMP1
000900 918f                                  POP         TEMP1
000901 9508                                  RET
                                 
                                 
                                 FUL_LED:
000902 938f                                  PUSH        TEMP1
000903 ef8f                                  LDI         TEMP1,      0b11111111
000904 b988                                  OUT         PORTC,      TEMP1
000905 b384                                  IN          TEMP1,      PORTG
000906 6083                                  ORI         TEMP1,      0b00000011
000907 bb84                                  OUT         PORTG,      TEMP1
000908 918f                                  POP         TEMP1
000909 9508                                  RET
                                 
                                 
                                 INC_LED:
00090a 930f                                  PUSH        ARG1
00090b 931f                                  PUSH        ARG2
00090c 938f                                  PUSH        TEMP1
00090d 939f                                  PUSH        TEMP2
00090e 940e 08fa                             CALL        CLR_LED
000910 eb08                                  LDI         ARG1,        LOW(3000)
000911 e01b                                  LDI         ARG2,        HIGH(3000)
000912 940e 08d8                             CALL        DELAY
000914 e081                                  LDI         TEMP1,       0b00000001
                                 INC_LED_LOOP:
000915 b988                                  OUT         PORTC,      TEMP1
000916 3f8f                                  CPI         TEMP1,      0xFF
000917 f031                                  BREQ        INC_LED_END
000918 0f88                                  LSL         TEMP1
000919 9583                                  INC         TEMP1
00091a 940e 08d8                             CALL       DELAY
00091c 940c 0915                             JMP        INC_LED_LOOP
                                 INC_LED_END:
00091e 919f                                  POP         TEMP2
00091f 918f                                  POP         TEMP1
000920 911f                                  POP         ARG2
000921 910f                                  POP         ARG1
000922 9508                                  RET
                                 
                                 
                                 DEC_LED:
000923 930f                                  PUSH        ARG1
000924 931f                                  PUSH        ARG2
000925 938f                                  PUSH        TEMP1
000926 939f                                  PUSH        TEMP2
000927 940e 08fa                             CALL       CLR_LED
000929 eb08                                  LDI         ARG1,        LOW(3000)
00092a e01b                                  LDI         ARG2,        HIGH(3000)
00092b ef8f                                  LDI         TEMP1,       0xFF
                                 DEC_LED_LOOP:
00092c b988                                  OUT         PORTC,      TEMP1
00092d 3080                                  CPI         TEMP1,      0
00092e f029                                  BREQ        DEC_LED_END
00092f 9586                                  LSR         TEMP1
000930 940e 08d8                             CALL       DELAY
000932 940c 092c                             JMP        DEC_LED_LOOP
                                 DEC_LED_END:
000934 919f                                  POP         TEMP2
000935 918f                                  POP         TEMP1
000936 911f                                  POP         ARG2
000937 910f                                  POP         ARG1
000938 9508                                  RET
                                 
                                 ;=================================== LCD driver ========================================
                                 
                                 .MACRO      TEST_LCD_DRIVER
                                             CLR         TEMP1
                                 TEST_LCD_DRIVER_LINE1:
                                             LDI         ARG1,       0b01001100  ; display letter L
                                             CALL       LCD_WRITE_DATA
                                             CALL       LCD_CHECK_BUSY
                                             LDI         ARG1,       LOW(3000)   ; delay
                                             LDI         ARG2,       HIGH(3000)
                                             CALL       DELAY
                                             INC         TEMP1                   ; i ++
                                             CPI         TEMP1,      16          ; if i != 16:
                                             BRNE        TEST_LCD_DRIVER_LINE1   ;   TEST_LCD_DRIVER_LINE1
                                             LDI         ARG1,       0b11000000  ; else: change to the second line
                                             CALL       LCD_WRITE_INS
                                             CALL       LCD_CHECK_BUSY
                                             CLR         TEMP1
                                 TEST_LCD_DRIVER_LINE2:
                                             LDI         ARG1,       0b01000011  ; display letter C
                                             CALL       LCD_WRITE_DATA
                                             CALL       LCD_CHECK_BUSY
                                             LDI         ARG1,       LOW(3000)   ; delay
                                             LDI         ARG2,       HIGH(3000)
                                             CALL       DELAY
                                             INC         TEMP1                   ; i ++
                                             CPI         TEMP1,      16          ; if i != 16:
                                             BRNE        TEST_LCD_DRIVER_LINE2   ;   TEST_LCD_DRIVER_LINE2
                                             LDI         ARG1,       LCD_CLR     ; else: clear screen
                                             CALL       LCD_WRITE_INS
                                             CALL       LCD_CHECK_BUSY
                                 .ENDMACRO
                                 
                                 
                                 .MACRO      INIT_LCD_IO
                                 ;   LCD(2*16 charactor) Initialization:
                                 ;   PF 0~7  --  Data 0~7
                                 ;   PA4     --  BE
                                 ;   PA5     --  RW      --  0:WRITE 1:READ
                                 ;   PA6     --  E       --  ENABLE READ/WRITE
                                 ;   PA7     --  RS      --  0:INSTRUCTION/BUSY
                                 ;                           1:DATA
                                             LDI         TEMP1,      0b11111111
                                             OUT         DDRF,       TEMP1           ; PF7~PF0: output
                                             IN          TEMP1,      DDRA
                                             ORI         TEMP1,      0b11110000
                                             OUT         DDRA,       TEMP1           ; PA7~PA4: output
                                 .ENDMACRO
                                 
                                 
                                 LCD_WRITE_INS:
                                 ;   this function can write ARG1 as an instruction to LCD
                                 ;   LCD Registers:
                                 ;   RS      RW      MODE
                                 ;   0       0       IR write         <--(using this)
                                 ;   0       1       Busy flag
                                 ;   1       0       DR write
                                 ;   1       1       DR read
000939 930f                                  PUSH        ARG1
00093a 938f                                  PUSH        TEMP1
00093b bb01                                  OUT         PORTF,      ARG1
00093c b182                                  IN          TEMP1,      PORTA
00093d 758f                                  ANDI        TEMP1,      0b01011111
00093e b982                                  OUT         PORTA,      TEMP1       ; reset RS and RW, IR write mode
00093f 0000                                  NOP
000940 9a16                                  SBI         PORTA,      6           ; set ENABLE
000941 0000                                  NOP
000942 0000                                  NOP
000943 0000                                  NOP
000944 9816                                  CBI         PORTA,      6           ; reset ENABLE
000945 0000                                  NOP
000946 918f                                  POP         TEMP1
000947 910f                                  POP         ARG1
000948 9508                                  RET
                                 
                                 
                                 LCD_WRITE_DATA:
                                 ;   this function can write ARG1 as data to LCD
                                 ;   LCD Registers:
                                 ;   RS      RW      MODE
                                 ;   0       0       IR write
                                 ;   0       1       Busy flag
                                 ;   1       0       DR write        <--(using this)
                                 ;   1       1       DR read
000949 930f                                  PUSH        ARG1
00094a 938f                                  PUSH        TEMP1
00094b bb01                                  OUT         PORTF,      ARG1
00094c b182                                  IN          TEMP1,      PORTA
00094d 6880                                  ORI         TEMP1,      0b10000000  ; set RS
00094e 7d8f                                  ANDI        TEMP1,      0b11011111  ; reset RW
00094f b982                                  OUT         PORTA,      TEMP1       ; DR write mode
000950 0000                                  NOP
000951 9a16                                  SBI         PORTA,      6           ; set ENABLE
000952 0000                                  NOP
000953 0000                                  NOP
000954 0000                                  NOP
000955 9816                                  CBI         PORTA,      6           ; reset ENABLE
000956 0000                                  NOP
000957 918f                                  POP         TEMP1
000958 910f                                  POP         ARG1
000959 9508                                  RET
                                 
                                 
                                 LCD_CHECK_BUSY:
                                 ;   this function return and only retrun when BUSY is reset
                                 ;   LCD can in any mode before calling this funtion
                                 ;   however, when it returns, LCD will be set to DATA WRITE mode
                                 ;   LCD Registers:
                                 ;   RS      RW      MODE
                                 ;   0       0       IR write
                                 ;   0       1       Busy flag       <-- (when checking)
                                 ;   1       0       DR write        <-- (when ending)
                                 ;   1       1       DR read
00095a 938f                                  PUSH        TEMP1
00095b e080                                  LDI         TEMP1,      0b00000000
00095c bb80                                  OUT         DDRF,       TEMP1       ; set PORT F as input mode
00095d bb81                                  OUT         PORTF,      TEMP1
00095e b182                                  IN          TEMP1,      PORTA
00095f 778f                                  ANDI        TEMP1,      0b01111111  ; reset RS
000960 6280                                  ORI         TEMP1,      0b00100000  ; set RW
000961 b982                                  OUT         PORTA,      TEMP1       ; Busy flag read mode
                                 LCD_CHECK_BUSY_LOOP:
000962 0000                                  NOP
000963 9a16                                  SBI         PORTA,      6           ; set ENABLE
000964 0000                                  NOP
000965 0000                                  NOP
000966 0000                                  NOP
000967 b18f                                  IN          TEMP1,      PINF
000968 9816                                  CBI         PORTA,      6           ; reset ENABLE
000969 fd87                                  SBRC        TEMP1,      7           ; if BUSY:
00096a 940c 0962                             JMP        LCD_CHECK_BUSY_LOOP     ;   repeat reading
00096c b182                                  IN          TEMP1,      PORTA       ; else:
00096d 758f                                  ANDI        TEMP1,      0b01011111
00096e b982                                  OUT         PORTA,      TEMP1       ; reset RS and RW, IR write mode
00096f ef8f                                  LDI         TEMP1,      0b11111111
000970 bb80                                  OUT         DDRF,       TEMP1       ; set PORT F as output mode
000971 918f                                  POP         TEMP1
000972 9508                                  RET
                                 
                                 
                                 LCD_SOFT_INIT:
                                 ; LCD software initialization
                                 ; S=1: shift
                                 ; S=0: don't shift          <--
                                 ; ID=1: increments          <--
                                 ; ID=0: decrements
                                 ; B=1: blink on
                                 ; B=0: blink off            <--
                                 ; C=1: display cursor       <--
                                 ; C=0: not display cursor
                                 ; D=1: display on           <--
                                 ; D=0: display off
                                 ; RL=0: left
                                 ; RL=1: right
                                 ; SC=0: cursor
                                 ; SC=1: entire display
                                 ; F=1: 5*10 dots
                                 ; F=0: 5*7 dots             <--
                                 ; N=0: 1 line display
                                 ; N=1: 2 lines display      <--
                                 ; DL=1: 8 bit mode          <--
                                 ; DL=0: 4 bit mode
                                 ; prologue
000973 930f                                  PUSH        ARG1
000974 931f                                  PUSH        ARG2
000975 938f                                  PUSH        TEMP1
000976 939f                                  PUSH        TEMP2
                                 ; function body
000977 e906                                  LDI         ARG1,       LOW(150)
000978 e010                                  LDI         ARG2,       HIGH(150)
000979 940e 08d8                             CALL       DELAY
00097b e300                                  LDI         ARG1,      LCD_FUN | (1<<LCD_FUN_DL)
00097c 940e 0939                             CALL       LCD_WRITE_INS
00097e e209                                  LDI         ARG1,       LOW(41)
00097f e010                                  LDI         ARG2,       HIGH(41)
000980 940e 08d8                             CALL       DELAY
000982 e300                                  LDI         ARG1,      LCD_FUN | (1<<LCD_FUN_DL)
000983 940e 0939                             CALL       LCD_WRITE_INS
000985 e001                                  LDI         ARG1,       LOW(1)
000986 e010                                  LDI         ARG2,       HIGH(1)
000987 940e 08d8                             CALL       DELAY
000989 e300                                  LDI         ARG1,      LCD_FUN | (1<<LCD_FUN_DL)
00098a 940e 0939                             CALL       LCD_WRITE_INS
00098c 940e 095a                             CALL       LCD_CHECK_BUSY
00098e e308                                  LDI         ARG1,      LCD_FUN | (1<<LCD_FUN_DL) |(1<<LCD_FUN_N)    ; 8 bit mode & 2 lines display
00098f 940e 0939                             CALL       LCD_WRITE_INS
000991 940e 095a                             CALL       LCD_CHECK_BUSY
000993 e008                                  LDI         ARG1,      LCD_DSP                                      ; trun off display
000994 940e 0939                             CALL       LCD_WRITE_INS
000996 940e 095a                             CALL       LCD_CHECK_BUSY
000998 e001                                  LDI         ARG1,      LCD_CLR
000999 940e 0939                             CALL       LCD_WRITE_INS
00099b 940e 095a                             CALL       LCD_CHECK_BUSY
00099d e006                                  LDI         ARG1,      LCD_ETR | (1<<LCD_ETR_ID)                    ; increasement mode
00099e 940e 0939                             CALL       LCD_WRITE_INS
0009a0 940e 095a                             CALL       LCD_CHECK_BUSY
0009a2 e00e                                  LDI         ARG1,      LCD_DSP | (1<<LCD_DSP_D)  | (1<<LCD_DSP_C)   ; trun on display & cursor
0009a3 940e 0939                             CALL       LCD_WRITE_INS
0009a5 940e 095a                             CALL       LCD_CHECK_BUSY
                                 ; epilogue
0009a7 919f                                  POP         TEMP2
0009a8 918f                                  POP         TEMP1
0009a9 911f                                  POP         ARG2
0009aa 910f                                  POP         ARG1
0009ab 9508                                  RET
                                 
                                 
                                 .MACRO      DISPLAY_STRING
                                             LDI         ZH,         HIGH(@0 << 1)
                                             LDI         ZL,         LOW(@0 << 1)
                                 DISPLAY_STRING_LOOP:
                                             LPM         ARG1,       Z+
                                             CPI         ARG1,        0
                                             BREQ        DISPLAY_STRING_END
                                             CALL       LCD_WRITE_DATA
                                             CALL       LCD_CHECK_BUSY
                                             JMP        DISPLAY_STRING_LOOP
                                 DISPLAY_STRING_END:
                                 .ENDMACRO
                                 
                                 
                                 DISPLAY_CLR:
                                 ; clear screen
0009ac 930f                                  PUSH       ARG1
0009ad e001                                  LDI        ARG1,       LCD_CLR
0009ae 940e 0939                             CALL       LCD_WRITE_INS
0009b0 940e 095a                             CALL       LCD_CHECK_BUSY
0009b2 910f                                  POP        ARG1
0009b3 9508                                  RET
                                 
                                 
                                 DISPLAY_NEWLINE:
                                 ; change to a new line
0009b4 930f                                  PUSH        ARG1
0009b5 ec00                                  LDI        ARG1,       0b11000000
0009b6 940e 0939                             CALL       LCD_WRITE_INS
0009b8 940e 095a                             CALL       LCD_CHECK_BUSY
0009ba 910f                                  POP        ARG1
0009bb 9508                                  RET
                                 
                                 ;===================================== Keypad Driver ==========================================
                                 
                                 .MACRO      TEST_KEYPAD_CONVERT
                                             LDI         ARG1,       0x7D
                                             CALL       KEYPAD_CONVERT
                                 .ENDMACRO
                                 
                                 
                                 .MACRO      TEST_KEYPAD_SCAN
                                 ; using LED to test KEYPAD_SCAN
                                 TEST_KEYPAD_SCAN_LOOP:
                                             CALL       KEYPAD_SCAN
                                             CALL       KEYPAD_CHECK_RELEASE
                                             OUT         PORTC,     RETURN1
                                             JMP        TEST_KEYPAD_SCAN_LOOP
                                 .ENDMACRO
                                 
                                 
                                 .MACRO      TEST_KEYPAD_WITH_CONVERT
                                 ; using LED to test CONVERT_TO_HEX_LOOP
                                 TEST_KEYPAD_WITH_CONVERT_LOOP:
                                             CALL       KEYPAD_SCAN
                                             CALL       KEYPAD_CHECK_RELEASE
                                             MOV         ARG1,       RETURN1
                                             CALL       KEYPAD_CONVERT
                                             OUT         PORTC,     RETURN1
                                             JMP        TEST_KEYPAD_WITH_CONVERT_LOOP
                                 .ENDMACRO
                                 
                                 
                                 .MACRO      INIT_KEYPAD_IO
                                 ;   Keypad Initialization:
                                 ;   R3(PL4)    1        2       3       A
                                 ;   R2(PL5)    4        5       6       B
                                 ;   R1(PL6)    7        8       9       C
                                 ;   R0(PL7)    *        0       #       D
                                 ;           C0(PL3) C1(PL2) C2(PL1) C3(PL0)
                                             LDI         TEMP1,      0b00001111
                                             STS         DDRL,       TEMP1           ; PL7~PL4: inut, PL3~PL0: output
                                 .ENDMACRO
                                 
                                 
                                 KEYPAD_SCAN:
                                 ;   scan keypad, return when released:
                                 ;   Keypad:
                                 ;         C0       C1      C2      C3
                                 ;   R0    1        2       3       A
                                 ;   R1    4        5       6       B
                                 ;   R2    7        8       9       C
                                 ;   R3   *(E)      0      #(F)     D
                                 ;   RETURN1 format:
                                 ;   C3 C2 C1 C0 R3 R2 R1 R0
                                 ;	Actived button are represented by 0, other bits are 1, for example:
                                 ;	if button 8 (C1,R2) are pushed, then RETURN1 will be: 11011011
0009bc 938f                                  PUSH        TEMP1
0009bd 939f                                  PUSH        TEMP2
                                 KEYPAD_SCAN_PRESS:
0009be ef47                                  LDI         RETURN1,    0b11110111
                                             ; Column mask(RETURN1):
                                             ; 1111 0111 --> 0111 1011 --> 0011 1101 --> 0001 1110  --> 0000 1111 (invalid)
                                 KEYPAD_SCAN_LOOP:
0009bf 304f                                  CPI         RETURN1,    0b00001111          ; if mask is invalid:
0009c0 f3e9                                  BREQ        KEYPAD_SCAN_PRESS               ;   goto KEYPAD_SCAN_PRESS
0009c1 9340 010b                             STS         PORTL,      RETURN1             ; else: write column
0009c3 ef8f                                  LDI         TEMP1,      0xFF                ; {
                                 KEYPAD_SCAN_DELAY:                                      ; delay
0009c4 958a                                  DEC         TEMP1                           ;
0009c5 f7f1                                  BRNE        KEYPAD_SCAN_DELAY               ; }
0009c6 9190 0109                             LDS         TEMP2,    PINL                  ; read row
0009c8 7f90                                  ANDI        TEMP2,    0b11110000            ;   mask low 4 bits
0009c9 3f90                                  CPI         TEMP2,    0b11110000            ; if having key pressed:
0009ca f419                                  BRNE        KEYPAD_SCAN_END                 ;   goto KEYPAD_SCAN_RELEASE
0009cb 9546                                  LSR         RETURN1                         ; else: right shift mask
0009cc 940c 09bf                             JMP        KEYPAD_SCAN_LOOP                ;   goto KEYPAD_SCAN_LOOP
                                 KEYPAD_SCAN_END:
0009ce 704f                                  ANDI        RETURN1,    0b00001111          ; mask high 4 bits
0009cf 7f90                                  ANDI        TEMP2,      0b11110000          ; mask high 4 bits
0009d0 0f49                                  ADD         RETURN1,    TEMP2
0009d1 919f                                  POP         TEMP2
0009d2 918f                                  POP         TEMP1
0009d3 9508                                  RET
                                 
                                 
                                 KEYPAD_CHECK_RELEASE:
                                 ; Only return when no key is pressed
0009d4 938f                                  PUSH        TEMP1
0009d5 939f                                  PUSH        TEMP2
0009d6 934f                                  PUSH        RETURN1
                                 KEYPAD_CHECK_RELEASE_LOOP:
0009d7 ef47                                  LDI         RETURN1,    0b11110111
                                             ; Column mask(RETURN1):
                                             ; 1111 0111 --> 0111 1011 --> 0011 1101 --> 0001 1110  --> 0000 1111 (invalid)
                                 KEYPAD_CHECK_RELEASE_COL:
0009d8 304f                                  CPI         RETURN1,    0b00001111          ; if mask is invalid:
0009d9 f069                                  BREQ        KEYPAD_CHECK_RELEASE_END        ;   goto KEYPAD_CHECK_RELEASE_END
0009da 9340 010b                             STS         PORTL,      RETURN1             ; else: write column
0009dc ef8f                                  LDI         TEMP1,      0xFF                ; {
                                 KEYPAD_CHECK_RELEASE_DELAY:                             ; delay
0009dd 958a                                  DEC         TEMP1                           ;
0009de f7f1                                  BRNE        KEYPAD_CHECK_RELEASE_DELAY      ; }
                                 KEYPAD_CHECK_RELEASE_ROW:
0009df 9190 0109                             LDS         TEMP2,    PINL                  ; read row
0009e1 7f90                                  ANDI        TEMP2,    0b11110000            ;   mask low 4 bits
0009e2 3f90                                  CPI         TEMP2,    0b11110000            ; if having key pressed:
0009e3 f799                                  BRNE        KEYPAD_CHECK_RELEASE_LOOP       ;   goto KEYPAD_CHECK_RELEASE_LOOP
0009e4 9546                                  LSR         RETURN1                         ; else: right shift mask
0009e5 940c 09d8                             JMP        KEYPAD_CHECK_RELEASE_COL        ;   goto KEYPAD_CHECK_RELEASE_COL
                                 KEYPAD_CHECK_RELEASE_END:
0009e7 914f                                  POP         RETURN1
0009e8 919f                                  POP         TEMP2
0009e9 918f                                  POP         TEMP1
0009ea 9508                                  RET
                                 
                                 
                                 KEYPAD_CONVERT:
                                 ; Convert keypad ARG1 to target format RETURN1
0009eb 930f                                  PUSH        ARG1
0009ec 938f                                  PUSH        TEMP1
0009ed 939f                                  PUSH        TEMP2
                                 ; Funciton body
0009ee e1f0                                  LDI         ZH,            HIGH(KEYPAD_CONVERT_KEY << 1)
0009ef eee4                                  LDI         ZL,            LOW(KEYPAD_CONVERT_KEY << 1)
0009f0 e080                                  LDI         TEMP1,         0x00                  ; TEMP2:TEPM1 is Index of dictionary
0009f1 e090                                  LDI         TEMP2,         0x00
                                 KEYPAD_CONVERT_SEARCH_KEY:
0009f2 9145                                  LPM         RETURN1,       Z+
0009f3 1740                                  CP          RETURN1,       ARG1                  ; if KEY != ARG1:
0009f4 f019                                  BREQ        KEYPAD_CONVERT_LOAD_VALUE            ;   go to KEYPAD_CONVERT_LOAD_VALUE
0009f5 9601                                  ADIW        TEMP2:TEMP1,   1                     ; else: Index += 2
0009f6 940c 09f2                             JMP        KEYPAD_CONVERT_SEARCH_KEY            ;   go to KEYPAD_CONVERT_SEARCH_KEY
                                 KEYPAD_CONVERT_LOAD_VALUE:
0009f8 e1f0                                  LDI         ZH,             HIGH(KEYPAD_CONVERT_VALUE << 1)
0009f9 efe4                                  LDI         ZL,             LOW(KEYPAD_CONVERT_VALUE << 1)
0009fa 0fe8                                  ADD         ZL,             TEMP1                   ; Z = Z + Index
0009fb 1ff9                                  ADC         ZH,             TEMP2
0009fc 9144                                  LPM         RETURN1,        Z
                                 ; Function end
0009fd 919f                                  POP         TEMP2
0009fe 918f                                  POP         TEMP1
0009ff 910f                                  POP         ARG1
000a00 9508                                  RET
                                 
                                 ;===================================== Motor Driver =========================================
                                 
                                 .MACRO      INIT_MOT_IO
                                 ;   PE3(Timer3) --> Mot(output)
                                             IN          TEMP1,      DDRE
                                             ORI         TEMP1,      0b00010000
                                             OUT         DDRE,       TEMP1           ; PE3: output
                                 .ENDMACRO
                                 
                                 
                                 .MACRO      TEST_MOTOR
                                 TEST_MOTOR_LOOP:
                                             SET_MOTOR_SPEED         0x00
                                             LDI         ARG1,       LOW(10000)
                                             LDI         ARG2,       HIGH(10000)
                                             CALL       DELAY
                                             SET_MOTOR_SPEED         0x80
                                             LDI         ARG1,       LOW(10000)
                                             LDI         ARG2,       HIGH(10000)
                                             CALL       DELAY
                                             SET_MOTOR_SPEED         0xFF
                                             LDI         ARG1,       LOW(10000)
                                             LDI         ARG2,       HIGH(10000)
                                             CALL       DELAY
                                             JMP        TEST_MOTOR_LOOP
                                 .ENDMACRO
                                 
                                 
                                 .MACRO      SET_MOTOR_SPEED
                                 ;  TCCR3A:
                                 ;       COM3A1=1 --> Compare Output Mode for Channel A
                                 ;       WGM30=1 --> PWM, Phase Correct, 8-bit Mode
                                 ;  TCCR3B:
                                 ;       CS32=0, CS31=0, CS30=1 --> clk/1 Mode
                                             CLR         TEMP1
                                             STS         OCR3BH,     TEMP1
                                             LDI         TEMP1,      @0
                                             STS         OCR3BL,     TEMP1
                                             LDI         TEMP1,      (1 << CS30)
                                             STS         TCCR3B,     TEMP1
                                             LDI         TEMP1,      (1 << WGM30) | (1 << COM3B1)
                                             STS         TCCR3A,     TEMP1
                                 .ENDMACRO
                                 
                                 ;=============================== User interaction ===================================
                                 
                                 .MACRO      TEST_SHOW_NUMBER
                                             LDI         ARG2,       7
                                             CALL       SHOW_NUMBER
                                             LDI         ARG1,       LOW(20000)
                                             LDI         ARG2,       HIGH(20000)
                                             CALL       DELAY
                                             LDI         ARG2,       98
                                             CALL       SHOW_NUMBER
                                             LDI         ARG1,       LOW(20000)
                                             LDI         ARG2,       HIGH(20000)
                                             CALL       DELAY
                                             LDI         ARG2,       100
                                             CALL       SHOW_NUMBER
                                             LDI         ARG1,       LOW(20000)
                                             LDI         ARG2,       HIGH(20000)
                                             CALL       DELAY
                                             LDI         ARG2,       105
                                             CALL       SHOW_NUMBER
                                             LDI         ARG1,       LOW(20000)
                                             LDI         ARG2,       HIGH(20000)
                                             CALL       DELAY
                                             LDI         ARG2,       123
                                             CALL       SHOW_NUMBER
                                             LDI         ARG1,       LOW(20000)
                                             LDI         ARG2,       HIGH(20000)
                                             CALL       DELAY
                                 .ENDMACRO
                                 
                                 
                                 .MACRO      TEST_SHOW_LOCATION
                                 ;   for example:
                                 ;   TEST_SHOW_LOCATION   x,  y,  DRONE_HEIGHT
                                             CALL        DISPLAY_CLR
                                             LDI         ARG1,           0
                                             LDI         ARG2,           0
                                             LDI         ARG3,           0
                                             RCALL       SHOW_LOCATION_X
                                             RCALL       SHOW_LOCATION_Y
                                             RCALL       SHOW_LOCATION_Z
                                             RCALL       KEYPAD_SCAN
                                             RCALL       KEYPAD_CHECK_RELEASE
                                             CALL        DISPLAY_CLR
                                             LDI         ARG1,           1
                                             LDI         ARG2,           2
                                             LDI         ARG3,           0
                                             RCALL       SHOW_LOCATION_X
                                             RCALL       SHOW_LOCATION_Y
                                             RCALL       SHOW_LOCATION_Z
                                             RCALL       KEYPAD_SCAN
                                             RCALL       KEYPAD_CHECK_RELEASE
                                             CALL        DISPLAY_CLR
                                             LDI         ARG1,           2
                                             LDI         ARG2,           1
                                             LDI         ARG3,           0
                                             RCALL       SHOW_LOCATION_X
                                             RCALL       SHOW_LOCATION_Y
                                             RCALL       SHOW_LOCATION_Z
                                             RCALL       KEYPAD_SCAN
                                             RCALL       KEYPAD_CHECK_RELEASE
                                             CALL        DISPLAY_CLR
                                             LDI         ARG1,           63
                                             LDI         ARG2,           0
                                             LDI         ARG3,           0
                                             RCALL       SHOW_LOCATION_X
                                             RCALL       SHOW_LOCATION_Y
                                             RCALL       SHOW_LOCATION_Z
                                             RCALL       KEYPAD_SCAN
                                             RCALL       KEYPAD_CHECK_RELEASE
                                             CALL        DISPLAY_CLR
                                             LDI         ARG1,           64
                                             LDI         ARG2,           0
                                             LDI         ARG3,           0
                                             RCALL       SHOW_LOCATION_X
                                             RCALL       SHOW_LOCATION_Y
                                             RCALL       SHOW_LOCATION_Z
                                             RCALL       KEYPAD_SCAN
                                             RCALL       KEYPAD_CHECK_RELEASE
                                             CALL        DISPLAY_CLR
                                             LDI         ARG1,           63
                                             LDI         ARG2,           63
                                             LDI         ARG3,           0
                                             RCALL       SHOW_LOCATION_X
                                             RCALL       SHOW_LOCATION_Y
                                             RCALL       SHOW_LOCATION_Z
                                             RCALL       KEYPAD_SCAN
                                             RCALL       KEYPAD_CHECK_RELEASE
                                 .ENDMACRO
                                 
                                 
                                 SHOW_NUMBER:
                                 ; givin a number in ARG2 (ARG1 will be used to call LCD_WRITE_DATA)
                                 ; show this number in LCD
000a01 930f                                  PUSH        ARG1
000a02 931f                                  PUSH        ARG2
000a03 938f                                  PUSH        TEMP1
000a04 920f                                  PUSH        R0
                                 ; function body
000a05 3614                                  CPI         ARG2,       100
000a06 f420                                  BRSH        SHOW_NUMBER_3           ;  ARG >=100
000a07 301a                                  CPI         ARG2,       10
000a08 f488                                  BRSH        SHOW_NUMBER_2           ;  100 > ARG >= 10
000a09 940c 0a29                             JMP        SHOW_NUMBER_1           ;  ARG < 10
                                 ; show the first digit
                                 SHOW_NUMBER_3:
000a0b e002                                  LDI         ARG1,       2           ; highest digit = 2
000a0c e684                                  LDI         TEMP1,      100
                                 SHOW_NUMBER_3_LOOP:
000a0d 9f08                                  MUL         ARG1,      TEMP1
000a0e 1510                                  CP          ARG2,       R0          ; if number >= highest digit * 100:
000a0f f418                                  BRSH        SHOW_NUMBER_3_END       ;   return highest digit
000a10 950a                                  DEC         ARG1                   ; else: decrease highest digit by 1
000a11 940c 0a0d                             JMP        SHOW_NUMBER_3_LOOP      ;   loop
                                 SHOW_NUMBER_3_END:
000a13 e380                                  LDI         TEMP1,      '0'         ; show the first digit
000a14 0f08                                  ADD         ARG1,      TEMP1
000a15 940e 0949                             CALL       LCD_WRITE_DATA
000a17 940e 095a                             CALL       LCD_CHECK_BUSY
000a19 1910                                  SUB         ARG2,       R0
                                 ; show the second digit
                                 SHOW_NUMBER_2:
000a1a e009                                  LDI         ARG1,       9           ; highest digit = 2
000a1b e08a                                  LDI         TEMP1,      10
                                 SHOW_NUMBER_2_LOOP:
000a1c 9f08                                  MUL         ARG1,       TEMP1
000a1d 1510                                  CP          ARG2,       R0          ; if number >= highest digit * 10:
000a1e f418                                  BRSH        SHOW_NUMBER_2_END       ;   return highest digit
000a1f 950a                                  DEC         ARG1                    ; else: decrease highest digit by 1
000a20 940c 0a1c                             JMP        SHOW_NUMBER_2_LOOP      ;   loop
                                 SHOW_NUMBER_2_END:
000a22 e380                                  LDI         TEMP1,      '0'         ; show the first digit
000a23 0f08                                  ADD         ARG1,       TEMP1
000a24 940e 0949                             CALL       LCD_WRITE_DATA
000a26 940e 095a                             CALL       LCD_CHECK_BUSY
000a28 1910                                  SUB         ARG2,       R0
                                 ; show the third digit
                                 SHOW_NUMBER_1:
000a29 2f01                                  MOV         ARG1,       ARG2
000a2a e380                                  LDI         TEMP1,      '0'
000a2b 0f08                                  ADD         ARG1,       TEMP1
000a2c 940e 0949                             CALL       LCD_WRITE_DATA
000a2e 940e 095a                             CALL       LCD_CHECK_BUSY
                                 ; function end
000a30 900f                                  POP         R0
000a31 918f                                  POP         TEMP1
000a32 911f                                  POP         ARG2
000a33 910f                                  POP         ARG1
000a34 9508                                  RET
                                 
                                 
                                 .MACRO      INPUT_NUMBER
                                 ; used in USER_INPUT, don't use in other place
                                 ; input a number, which will be stored into RETURN2
                                 ; show this number in LCD Interactively
                                 ; press # to confirm
                                 ; guarantee input will be in range[0, 255]
                                             CLR         RETURN2
                                 ; input the first digits
                                 INPUT_NUMBER_1:
                                             CALL        KEYPAD_SCAN
                                             CALL        KEYPAD_CHECK_RELEASE
                                             MOV         ARG1,       RETURN1
                                             CALL        KEYPAD_CONVERT
                                             CPI         RETURN1,    10          ; if input != digit:
                                             BRSH        INPUT_NUMBER_1          ;   input agint
                                             ADD         RETURN2,    RETURN1     ; else: Calculate RETURN2 = RETURN1
                                             MOV         ARG1,       RETURN1     ;       display digit
                                             LDI         TEMP1,      '0'
                                             ADD         ARG1,       TEMP1
                                             CALL        LCD_WRITE_DATA
                                             CALL        LCD_CHECK_BUSY
                                 ; input the first digits or #
                                 INPUT_NUMBER_2:
                                             CALL        KEYPAD_SCAN
                                             CALL        KEYPAD_CHECK_RELEASE
                                             MOV         ARG1,       RETURN1
                                             CALL        KEYPAD_CONVERT
                                             CPI         RETURN1,    0x0F        ; if input == #:
                                             BREQ        INPUT_NUMBER_END        ;   END
                                             CPI         RETURN1,    10          ; elif input != digit:
                                             BRSH        INPUT_NUMBER_2          ;   input agint
                                             LDI         TEMP1,      10          ; R0 = RETURN2 * 10
                                             MUL         RETURN2,    TEMP1
                                             ADD         R0,         RETURN1     ; R0 = RETURN2 * 10 + RETURN1
                                             MOV         RETURN2,    R0          ; RETURN2 = R0
                                             MOV         ARG1,       RETURN1     ; display digit
                                             LDI         TEMP1,      '0'
                                             ADD         ARG1,       TEMP1
                                             CALL       LCD_WRITE_DATA
                                             CALL       LCD_CHECK_BUSY
                                 INPUT_NUMBER_3:
                                             CALL       KEYPAD_SCAN
                                             CALL       KEYPAD_CHECK_RELEASE
                                             MOV         ARG1,       RETURN1
                                             CALL       KEYPAD_CONVERT
                                             CPI         RETURN1,    0x0F        ; if input == #:
                                             BREQ        INPUT_NUMBER_END        ;   END
                                             CPI         RETURN1,    10          ; elif input != digit:
                                             BRSH        INPUT_NUMBER_3          ;   input again
                                             LDI         TEMP1,      10          ; R0 = RETURN2 * 10
                                             MUL         RETURN2,    TEMP1       ; if R0 > 255:
                                             LDI         TEMP1,      1           ;   input again
                                             CP          R1,         TEMP1
                                             BRSH        INPUT_NUMBER_3
                                             ADD         R0,         RETURN1     ; R0 = RETURN2 * 10 + RETURN1
                                             LDI         TEMP1,      0
                                             ADC         TEMP1,      TEMP1
                                             CPI         TEMP1,      1
                                             BRSH        INPUT_NUMBER_3
                                             MOV         RETURN2,    R0          ;       RETURN2 = R0
                                             MOV         ARG1,       RETURN1     ;       display digit
                                             LDI         TEMP1,      '0'
                                             ADD         ARG1,       TEMP1
                                             CALL       LCD_WRITE_DATA
                                             CALL       LCD_CHECK_BUSY
                                 INPUT_NUMBER_END:
                                 .ENDMACRO
                                 
                                 
                                 SHOW_LOCATION_X:
                                 ;   current location is stored in ARG1 ARG2
000a35 930f                                  PUSH        ARG1
000a36 931f                                  PUSH        ARG2
000a37 934f                                  PUSH        RETURN1
000a38 938f                                  PUSH        TEMP1
                                 ;   start function
000a39 2f10                                  MOV         ARG2,       ARG1        ; preserve ARG1
000a3a e1f1
000a3b eae2
000a3c 9105
000a3d 3000
000a3e f031
000a3f 940e 0949
000a41 940e 095a
000a43 940c 0a3c                             DISPLAY_STRING          STRING_X    ; ARG1  will be lost
000a45 940e 0a01                             CALL                    SHOW_NUMBER
                                 ;   end of function
000a47 918f                                  POP         TEMP1
000a48 914f                                  POP         RETURN1
000a49 911f                                  POP         ARG2
000a4a 910f                                  POP         ARG1
000a4b 9508                                  RET
                                 
                                 
                                 SHOW_LOCATION_Y:
                                 ;   current location is stored in ARG1 ARG2
000a4c 930f                                  PUSH        ARG1
000a4d 931f                                  PUSH        ARG2
000a4e 934f                                  PUSH        RETURN1
000a4f 938f                                  PUSH        TEMP1
                                 ;   start function
000a50 e1f1
000a51 eaee
000a52 9105
000a53 3000
000a54 f031
000a55 940e 0949
000a57 940e 095a
000a59 940c 0a52                             DISPLAY_STRING          STRING_COMMA
000a5b e1f1
000a5c eae6
000a5d 9105
000a5e 3000
000a5f f031
000a60 940e 0949
000a62 940e 095a
000a64 940c 0a5d                             DISPLAY_STRING          STRING_Y    ; ARG1  will be lost
000a66 940e 0a01                             CALL                    SHOW_NUMBER
                                 ;   end of function
000a68 918f                                  POP         TEMP1
000a69 914f                                  POP         RETURN1
000a6a 911f                                  POP         ARG2
000a6b 910f                                  POP         ARG1
000a6c 9508                                  RET
                                 
                                 
                                 SHOW_LOCATION_Z:
                                 ;   INPUT：
                                 ;    ARG1, ARG2 for x, y
                                 ;    ARG3 is the height of the drone
                                 ;
                                 ;   show the height of the mountain + ARG3
000a6d 930f                                  PUSH        ARG1
000a6e 931f                                  PUSH        ARG2
000a6f 932f                                  PUSH        ARG3
000a70 938f                                  PUSH        TEMP1
000a71 920f                                  PUSH        R0
000a72 921f                                  PUSH        R1
000a73 93ff                                  PUSH        ZH
000a74 93ef                                  PUSH        ZL
                                 ;   start function
000a75 2f80                                  MOV         TEMP1,          ARG1                   ; preserv ARG1
000a76 e1f1
000a77 eaee
000a78 9105
000a79 3000
000a7a f031
000a7b 940e 0949
000a7d 940e 095a
000a7f 940c 0a78                             DISPLAY_STRING              STRING_COMMA           ; ARG1  will be lost
000a81 e1f1
000a82 eaea
000a83 9105
000a84 3000
000a85 f031
000a86 940e 0949
000a88 940e 095a
000a8a 940c 0a83                             DISPLAY_STRING              STRING_Z               ; ARG1  will be lost
000a8c 2f08                                  MOV         ARG1,           TEMP1                  ; restore ARG1
000a8d e0f0                                  LDI         ZH,            HIGH(MOUNTAIN_MAP << 1)
000a8e eee4                                  LDI         ZL,            LOW(MOUNTAIN_MAP << 1)
000a8f e480                                  LDI         TEMP1,         MAP_SIZE              ; R1:R0 = MAP_SIZE * y
000a90 9f18                                  MUL         ARG2,          TEMP1                 ; {}
000a91 e080                                  LDI         TEMP1,         0                     ; R1:R0 = MAP_SIZE * y + x
000a92 0e00                                  ADD         R0,            ARG1                  ; {
000a93 1e18                                  ADC         R1,            TEMP1                 ; }
000a94 0de0                                  ADD         ZL,            R0                    ; ZL += R0
000a95 1df1                                  ADC         ZH,            R1                    ; ZH += R1
000a96 9114                                  LPM         ARG2,          Z                     ; show HEIGHT + ARG3
000a97 0f12                                  ADD         ARG2,          ARG3                  ; {
000a98 940e 0a01                             CALL        SHOW_NUMBER                          ; }
                                 ;   end of function
000a9a 91ef                                  POP         ZL
000a9b 91ff                                  POP         ZH
000a9c 901f                                  POP         R1
000a9d 900f                                  POP         R0
000a9e 918f                                  POP         TEMP1
000a9f 912f                                  POP         ARG3
000aa0 911f                                  POP         ARG2
000aa1 910f                                  POP         ARG1
000aa2 9508                                  RET
                                 
                                 ;================================= Module ==========================================
                                 
                                 .MACRO      TEST_USER_INPUT
                                             CLR         ACCIDENT_X
                                             CLR         ACCIDENT_Y
                                             USER_INPUT
                                             CALL        DISPLAY_CLR
                                             MOV         ARG2,       ACCIDENT_X
                                             CALL       SHOW_NUMBER
                                             CALL        DISPLAY_NEWLINE
                                             MOV         ARG2,       ACCIDENT_Y
                                             CALL       SHOW_NUMBER
                                 .ENDMACRO
                                 
                                 
                                 .MACRO      USER_INPUT
                                 ; input accident and store into ACCIDENT_X and ACCIDENT_Y
                                 USER_INPUT_X:
                                             CALL        DISPLAY_CLR
                                             DISPLAY_STRING          STRING_INPUT_X
                                             INPUT_NUMBER
                                             CPI         RETURN2,    64            ; if input out of range:
                                             BRSH        USER_INPUT_X_OV           ;     USER_INPUT_X_OV
                                             MOV         ACCIDENT_X,    RETURN2
                                             JMP         USER_INPUT_Y
                                 USER_INPUT_X_OV:
                                             CALL        DISPLAY_CLR
                                             DISPLAY_STRING          STRING_INPUT_OV
                                             CALL        DISPLAY_NEWLINE
                                             DISPLAY_STRING          STRING_TRY_AGAIN
                                             LDI         ARG1,       LOW(30000)
                                             LDI         ARG2,       HIGH(30000)
                                             CALL       DELAY
                                             JMP        USER_INPUT_X
                                 USER_INPUT_Y:
                                             CALL        DISPLAY_NEWLINE
                                             DISPLAY_STRING          STRING_INPUT_Y
                                             INPUT_NUMBER
                                             CPI         RETURN2,    64            ; if input out of range:
                                             BRSH        USER_INPUT_Y_OV             ;     USER_INPUT_OV
                                             MOV         ACCIDENT_Y,    RETURN2
                                             JMP        USER_INPUT_END            ; else: end
                                 USER_INPUT_Y_OV:
                                             CALL        DISPLAY_CLR
                                             DISPLAY_STRING          STRING_INPUT_OV
                                             CALL        DISPLAY_NEWLINE
                                             DISPLAY_STRING          STRING_TRY_AGAIN
                                             LDI         ARG1,       LOW(30000)
                                             LDI         ARG2,       HIGH(30000)
                                             CALL       DELAY
                                             JMP        USER_INPUT_X
                                 USER_INPUT_END:
                                 .ENDMACRO
                                 
                                 
                                 
                                 SHOW_SEARCH_STATUS:
000aa3 930f                                  PUSH        ARG1
000aa4 931f                                  PUSH        ARG2
000aa5 932f                                  PUSH        ARG3
000aa6 938f                                  PUSH        TEMP1
000aa7 936f                                  PUSH        GLOBAL1
000aa8 937f                                  PUSH        GLOBAL2
                                 ;   function start
000aa9 940e 09ac                             CALL        DISPLAY_CLR
000aab e1f1
000aac e3ec
000aad 9105
000aae 3000
000aaf f031
000ab0 940e 0949
000ab2 940e 095a
000ab4 940c 0aad                             DISPLAY_STRING          STRING_STATUS_S
000ab6 940e 09b4                             CALL        DISPLAY_NEWLINE
000ab8 2f06                                  MOV         ARG1,       GLOBAL1
000ab9 2f17                                  MOV         ARG2,       GLOBAL2
000aba e029                                  LDI         ARG3,       DRONE_HEIGHT
000abb 940e 0a35                             CALL        SHOW_LOCATION_X
000abd 940e 0a4c                             CALL        SHOW_LOCATION_Y
000abf 940e 0a6d                             CALL        SHOW_LOCATION_Z
000ac1 ed00                                  LDI         ARG1,       LOW(DRONE_SPEED)
000ac2 e017                                  LDI         ARG2,       HIGH(DRONE_SPEED)
000ac3 940e 08d8                             CALL        DELAY
                                 ;   funciton end
000ac5 917f                                  POP         GLOBAL2
000ac6 916f                                  POP         GLOBAL1
000ac7 918f                                  POP         TEMP1
000ac8 912f                                  POP         ARG3
000ac9 911f                                  POP         ARG2
000aca 910f                                  POP         ARG1
000acb 9508                                  RET
                                 
                                 
                                 SHOW_RETURN_STATUS:
000acc 930f                                  PUSH        ARG1
000acd 931f                                  PUSH        ARG2
000ace 932f                                  PUSH        ARG3
000acf 938f                                  PUSH        TEMP1
000ad0 936f                                  PUSH        GLOBAL1
000ad1 937f                                  PUSH        GLOBAL2
                                 ;   function start
000ad2 940e 09ac                             CALL        DISPLAY_CLR
000ad4 e1f1
000ad5 e4ec
000ad6 9105
000ad7 3000
000ad8 f031
000ad9 940e 0949
000adb 940e 095a
000add 940c 0ad6                             DISPLAY_STRING          STRING_STATUS_R
000adf 940e 09b4                             CALL        DISPLAY_NEWLINE
000ae1 2f06                                  MOV         ARG1,       GLOBAL1
000ae2 2f17                                  MOV         ARG2,       GLOBAL2
000ae3 e029                                  LDI         ARG3,       DRONE_HEIGHT
000ae4 940e 0a35                             CALL        SHOW_LOCATION_X
000ae6 940e 0a4c                             CALL        SHOW_LOCATION_Y
000ae8 940e 0a6d                             CALL        SHOW_LOCATION_Z
000aea ed00                                  LDI         ARG1,       LOW(DRONE_SPEED)
000aeb e017                                  LDI         ARG2,       HIGH(DRONE_SPEED)
000aec 940e 08d8                             CALL        DELAY
                                 ;   funciton end
000aee 917f                                  POP         GLOBAL2
000aef 916f                                  POP         GLOBAL1
000af0 918f                                  POP         TEMP1
000af1 912f                                  POP         ARG3
000af2 911f                                  POP         ARG2
000af3 910f                                  POP         ARG1
000af4 9508                                  RET
                                 
                                 
                                 DRONE_INSPECT:
                                 ;   use ARG1 and ARG2 as current location
000af5 930f                                  PUSH        ARG1
000af6 931f                                  PUSH        ARG2
000af7 932f                                  PUSH        ARG3
000af8 938f                                  PUSH        TEMP1
                                 ;   function start
000af9 e029                                  LDI         ARG3,       DRONE_HEIGHT
000afa 940e 09ac                             CALL        DISPLAY_CLR
000afc 2f80                                  MOV         TEMP1,      ARG1
000afd e1f1
000afe e5ec
000aff 9105
000b00 3000
000b01 f031
000b02 940e 0949
000b04 940e 095a
000b06 940c 0aff                             DISPLAY_STRING          STRING_STATUS_I
000b08 2f08                                  MOV         ARG1,       TEMP1
000b09 940e 09b4                             CALL        DISPLAY_NEWLINE
000b0b 940e 0a35                             CALL        SHOW_LOCATION_X
000b0d 940e 0a4c                             CALL        SHOW_LOCATION_Y
000b0f 940e 0a6d                             CALL        SHOW_LOCATION_Z
000b11 940e 08f1                             CALL        TOGGLE_LED
000b13 e808                                  LDI         ARG1,       LOW(5000)
000b14 e113                                  LDI         ARG2,       HIGH(5000)
000b15 940e 08d8                             CALL        DELAY
000b17 940e 08f1                             CALL        TOGGLE_LED
000b19 e808                                  LDI         ARG1,       LOW(5000)
000b1a e113                                  LDI         ARG2,       HIGH(5000)
000b1b 940e 08d8                             CALL        DELAY
000b1d 940e 08f1                             CALL        TOGGLE_LED
000b1f e808                                  LDI         ARG1,       LOW(5000)
000b20 e113                                  LDI         ARG2,       HIGH(5000)
000b21 940e 08d8                             CALL        DELAY
000b23 940e 08f1                             CALL        TOGGLE_LED
000b25 e808                                  LDI         ARG1,       LOW(5000)
000b26 e113                                  LDI         ARG2,       HIGH(5000)
000b27 940e 08d8                             CALL        DELAY
000b29 940e 08f1                             CALL        TOGGLE_LED
000b2b e808                                  LDI         ARG1,       LOW(5000)
000b2c e113                                  LDI         ARG2,       HIGH(5000)
000b2d 940e 08d8                             CALL        DELAY
000b2f 940e 08f1                             CALL        TOGGLE_LED
000b31 e808                                  LDI         ARG1,       LOW(5000)
000b32 e113                                  LDI         ARG2,       HIGH(5000)
000b33 940e 08d8                             CALL        DELAY
                                 ;   funciton end
000b35 918f                                  POP         TEMP1
000b36 912f                                  POP         ARG3
000b37 911f                                  POP         ARG2
000b38 910f                                  POP         ARG1
000b39 9508                                  RET
                                 
                                 
                                 ;====================================================================================
000b3a 940c 0d57                 			JMP		END
                                 
                                 
                                 RESET:
                                 ;   initialise emulation system
000b3c ef8f
000b3d bb80
000b3e b181
000b3f 6f80
000b40 b981                                  INIT_LCD_IO
000b41 ef8f
000b42 b987
000b43 b383
000b44 6083
000b45 bb83                                  INIT_LED_IO
000b46 e08f
000b47 9380 010a                             INIT_KEYPAD_IO
000b49 b18d
000b4a 6180
000b4b b98d                                  INIT_MOT_IO
000b4c b18a
000b4d 7f8e
000b4e b98a
000b4f b18b
000b50 6081
000b51 b98b
000b52 e082
000b53 9380 0069                             INIT_BUTTON_RIGHT
000b55 b18a
000b56 7f8d
000b57 b98a
000b58 b18b
000b59 6082
000b5a b98b
000b5b e088
000b5c 9380 0069                             INIT_BUTTON_LEFT
000b5e 940e 0973                             CALL       LCD_SOFT_INIT
000b60 2422                                  CLR         ACCIDENT_X                  ; accident location
000b61 2433                                  CLR         ACCIDENT_Y
000b62 2766                                  CLR         GLOBAL1                     ; current location
000b63 2777                                  CLR         GLOBAL2
                                 
                                 MAIN:
                                 ;   GROUNDED MODE
000b64 940e 09ac
000b66 e1f1
000b67 e0e4
000b68 9105
000b69 3000
000b6a f031
000b6b 940e 0949
000b6d 940e 095a
000b6f 940c 0b68
000b71 2755
000b72 940e 09bc
000b74 940e 09d4
000b76 2f04
000b77 940e 09eb
000b79 304a
000b7a f7b8
000b7b 0f54
000b7c 2f04
000b7d e380
000b7e 0f08
000b7f 940e 0949
000b81 940e 095a
000b83 940e 09bc
000b85 940e 09d4
000b87 2f04
000b88 940e 09eb
000b8a 304f
000b8b f151
000b8c 304a
000b8d f7a8
000b8e e08a
000b8f 9f58
000b90 0e04
000b91 2d50
000b92 2f04
000b93 e380
000b94 0f08
000b95 940e 0949
000b97 940e 095a
000b99 940e 09bc
000b9b 940e 09d4
000b9d 2f04
000b9e 940e 09eb
000ba0 304f
000ba1 f0a1
000ba2 304a
000ba3 f7a8
000ba4 e08a
000ba5 9f58
000ba6 e081
000ba7 1618
000ba8 f780
000ba9 0e04
000baa e080
000bab 1f88
000bac 3081
000bad f758
000bae 2d50
000baf 2f04
000bb0 e380
000bb1 0f08
000bb2 940e 0949
000bb4 940e 095a
000bb6 3450
000bb7 f418
000bb8 2e25
000bb9 940c 0bdb
000bbb 940e 09ac
000bbd e1f1
000bbe e1e8
000bbf 9105
000bc0 3000
000bc1 f031
000bc2 940e 0949
000bc4 940e 095a
000bc6 940c 0bbf
000bc8 940e 09b4
000bca e1f1
000bcb e2e2
000bcc 9105
000bcd 3000
000bce f031
000bcf 940e 0949
000bd1 940e 095a
000bd3 940c 0bcc
000bd5 e300
000bd6 e715
000bd7 940e 08d8
000bd9 940c 0b64
000bdb 940e 09b4
000bdd e1f1
000bde e0ee
000bdf 9105
000be0 3000
000be1 f031
000be2 940e 0949
000be4 940e 095a
000be6 940c 0bdf
000be8 2755
000be9 940e 09bc
000beb 940e 09d4
000bed 2f04
000bee 940e 09eb
000bf0 304a
000bf1 f7b8
000bf2 0f54
000bf3 2f04
000bf4 e380
000bf5 0f08
000bf6 940e 0949
000bf8 940e 095a
000bfa 940e 09bc
000bfc 940e 09d4
000bfe 2f04
000bff 940e 09eb
000c01 304f
000c02 f151
000c03 304a
000c04 f7a8
000c05 e08a
000c06 9f58
000c07 0e04
000c08 2d50
000c09 2f04
000c0a e380
000c0b 0f08
000c0c 940e 0949
000c0e 940e 095a
000c10 940e 09bc
000c12 940e 09d4
000c14 2f04
000c15 940e 09eb
000c17 304f
000c18 f0a1
000c19 304a
000c1a f7a8
000c1b e08a
000c1c 9f58
000c1d e081
000c1e 1618
000c1f f780
000c20 0e04
000c21 e080
000c22 1f88
000c23 3081
000c24 f758
000c25 2d50
000c26 2f04
000c27 e380
000c28 0f08
000c29 940e 0949
000c2b 940e 095a
000c2d 3450
000c2e f418
000c2f 2e35
000c30 940c 0c52
000c32 940e 09ac
000c34 e1f1
000c35 e1e8
000c36 9105
000c37 3000
000c38 f031
000c39 940e 0949
000c3b 940e 095a
000c3d 940c 0c36
000c3f 940e 09b4
000c41 e1f1
000c42 e2e2
000c43 9105
000c44 3000
000c45 f031
000c46 940e 0949
000c48 940e 095a
000c4a 940c 0c43
000c4c e300
000c4d e715
000c4e 940e 08d8
000c50 940c 0b64                             USER_INPUT                              ; get accident point and store it into ACCIDENT_X ACCIDENT_Y
000c52 940e 09ac                             CALL        DISPLAY_CLR
000c54 e1f1
000c55 e2ec
000c56 9105
000c57 3000
000c58 f031
000c59 940e 0949
000c5b 940e 095a
000c5d 940c 0c56                             DISPLAY_STRING          STRING_STATUS_G
000c5f 940e 09b4                             CALL        DISPLAY_NEWLINE
000c61 2700                                  CLR         ARG1                        ; X, Y = (0, 0)
000c62 2711                                  CLR         ARG2
000c63 2722                                  CLR         ARG3                        ; height = 0, means drone is on the ground
000c64 940e 0a35                             CALL        SHOW_LOCATION_X
000c66 940e 0a4c                             CALL        SHOW_LOCATION_Y
000c68 940e 0a6d                             CALL        SHOW_LOCATION_Z
                                 ;   Configue interupted
000c6a b38d                                  IN          TEMP1,      EIMSK          ; enalbe INT1(left button)
000c6b 6082                                  ORI         TEMP1,      (1<<INT1)
000c6c bb8d                                  OUT         EIMSK,      TEMP1
000c6d b38d                                  IN          TEMP1,      EIMSK          ; disalbe INT0(right button)
000c6e 6080                                  ORI         TEMP1,      (0<<INT0)
000c6f bb8d                                  OUT         EIMSK,      TEMP1
000c70 9478                                  SEI                                    ; enable global interupt
                                 STAND_BY:
000c71 cfff                                  RJMP        STAND_BY
                                 
                                 
                                 ;====================================================================================
                                 
                                 LEFT_INT:
                                 ;   SEARCH MODE
                                 ;   Configue interupted            
000c72 b38d                                  IN          TEMP1,      EIMSK           ; disalbe INT1(left button)
000c73 7080                                  ANDI        TEMP1,      (0<<INT1)
000c74 bb8d                                  OUT         EIMSK,      TEMP1
000c75 b38d                                  IN          TEMP1,      EIMSK           ; enalbe INT0(right button)
000c76 6081                                  ORI         TEMP1,      (1<<INT0)
000c77 bb8d                                  OUT         EIMSK,      TEMP1
000c78 94f8                                  CLI                                     ; disable global interupt   
                                 ;   TAKE OFF
000c79 940e 090a                             CALL        INC_LED
000c7b 2788
000c7c 9380 009b
000c7e ef8f
000c7f 9380 009a
000c81 e081
000c82 9380 0091
000c84 e281
000c85 9380 0090                             SET_MOTOR_SPEED         0xFF
000c87 e020                                  LDI         ARG3,       0               ; drone start from the ground
                                 DRONE_TAKE_OFF:
000c88 940e 09ac                             CALL        DISPLAY_CLR
000c8a e1f1
000c8b e6ec
000c8c 9105
000c8d 3000
000c8e f031
000c8f 940e 0949
000c91 940e 095a
000c93 940c 0c8c                             DISPLAY_STRING          STRING_STATUS_T
000c95 940e 09b4                             CALL        DISPLAY_NEWLINE
000c97 2700                                  CLR         ARG1                        ; take off on X, Y = (0, 0)
000c98 2711                                  CLR         ARG2
000c99 940e 0a35                             CALL        SHOW_LOCATION_X
000c9b 940e 0a4c                             CALL        SHOW_LOCATION_Y
000c9d 940e 0a6d                             CALL        SHOW_LOCATION_Z             ; show z = z(0, 0) + ARG3
000c9f 9523                                  INC         ARG3
000ca0 3029                                  CPI         ARG3,       DRONE_HEIGHT
000ca1 f428                                  BRSH        DRONE_SEARCH
000ca2 eb08                                  LDI         ARG1,       LOW(3000)
000ca3 e01b                                  LDI         ARG2,       HIGH(3000)
000ca4 940e 08d8                             CALL        DELAY
000ca6 cfe1                                  RJMP        DRONE_TAKE_OFF
                                 
                                 DRONE_SEARCH:            
000ca7 9478                                  SEI                                     ; enable global interupt
                                 ;   use ARG1 and ARG2 as current location
                                 SEARCH_INC:
                                 ;   x will increase by 1 after each loop
000ca8 1562                                  CP          GLOBAL1,       ACCIDENT_X     ; if x != ACCIDENT_X:
000ca9 f411                                  BRNE        SEARCH_INC_NEXT         ;   SEARCH_INC_NEXT
000caa 1573                                  CP          GLOBAL2,       ACCIDENT_Y     ; elif y == ACCIDENT_Y:
000cab f0f1                                  BREQ        SEARCH_END              ;   SEARCH_END
                                 SEARCH_INC_NEXT:
000cac 336f                                  CPI         GLOBAL1,       MAP_SIZE-1  ; if x == MAP_SIZE-1:
000cad f428                                  BRSH        SEARCH_INC_END          ;   SEARCH_INC_END
000cae 940e 0aa3                             CALL        SHOW_SEARCH_STATUS
000cb0 9563                                  INC         GLOBAL1                    ; else: x++
000cb1 940c 0ca8                             JMP         SEARCH_INC              ;   SEARCH_INC
                                 SEARCH_INC_END:
000cb3 940e 0aa3                             CALL        SHOW_SEARCH_STATUS
000cb5 9573                                  INC         GLOBAL2                    ; y++
000cb6 940e 0aa3                             CALL        SHOW_SEARCH_STATUS
                                 SEARCH_DEC:
                                 ;   x will decrease by 1 after each loop
000cb8 1562                                  CP          GLOBAL1,       ACCIDENT_X     ; if x != ACCIDENT_X:
000cb9 f411                                  BRNE        SEARCH_DEC_NEXT         ;   SEARCH_DEC_NEXT
000cba 1573                                  CP          GLOBAL2,       ACCIDENT_Y     ; elif y == ACCIDENT_Y:
000cbb f071                                  BREQ        SEARCH_END              ;   SEARCH_END
                                 SEARCH_DEC_NEXT:
000cbc 3061                                  CPI         GLOBAL1,       1           ; if x == 0:
000cbd f028                                  BRLO        SEARCH_DEC_END          ;   SEARCH_DEC_END
000cbe 940e 0aa3                             CALL        SHOW_SEARCH_STATUS
000cc0 956a                                  DEC         GLOBAL1                    ; else: x--
000cc1 940c 0cb8                             JMP         SEARCH_DEC              ;   SEARCH_DEC
                                 SEARCH_DEC_END:
000cc3 940e 0aa3                             CALL        SHOW_SEARCH_STATUS
000cc5 9573                                  INC         GLOBAL2                    ; y++
000cc6 940e 0aa3                             CALL        SHOW_SEARCH_STATUS
000cc8 940c 0ca8                             JMP         SEARCH_INC
                                 SEARCH_END:
000cca 940e 0aa3                             CALL        SHOW_SEARCH_STATUS
000ccc 94f8                                  CLI                                   ; disable global interupt        
                                 
                                 ;   INSPECT
000ccd 2788
000cce 9380 009b
000cd0 e480
000cd1 9380 009a
000cd3 e081
000cd4 9380 0091
000cd6 e281
000cd7 9380 0090                             SET_MOTOR_SPEED         0x40
000cd9 2f06                                  MOV        ARG1,        GLOBAL1
000cda 2f17                                  MOV        ARG2,        GLOBAL2
000cdb 940e 0af5                             CALL       DRONE_INSPECT
000cdd c003                                  RJMP       END_SIMULATION
                                 
                                 ;====================================================================================
                                 
                                 RIGHT_INT:
                                 ;   MARK ABORTED
000cde ef8f                      			LDI			TEMP1,		0xFF
000cdf 2e28                                  MOV         ACCIDENT_X, TEMP1
000ce0 c000                                  RJMP        END_SIMULATION
                                 
                                 ;====================================================================================
                                 
                                 END_SIMULATION:
                                 ;   Configue interupted    
000ce1 b38d                                  IN          TEMP1,      EIMSK          ; disalbe INT1(left button)
000ce2 7080                                  ANDI        TEMP1,      (0<<INT1)
000ce3 bb8d                                  OUT         EIMSK,      TEMP1
000ce4 b38d                                  IN          TEMP1,      EIMSK           ; disalbe INT0(right button)
000ce5 7080                                  ANDI        TEMP1,      (0<<INT0)
000ce6 bb8d                                  OUT         EIMSK,      TEMP1
000ce7 94f8                                  CLI                                     ; disable global interupt
                                 
                                 DRONE_RETURN:
000ce8 2788
000ce9 9380 009b
000ceb ef8f
000cec 9380 009a
000cee e081
000cef 9380 0091
000cf1 e281
000cf2 9380 0090                             SET_MOTOR_SPEED         0xFF
                                 RETURN_Y:
                                 ;   y will decrease by 1 after each loop
000cf4 940e 0acc                             CALL        SHOW_RETURN_STATUS
000cf6 3071                                  CPI         GLOBAL2,       1           ; if y == 0:
000cf7 f018                                  BRLO        RETURN_X                   ;   RETURN_X
000cf8 957a                                  DEC         GLOBAL2                    ; else: y--
000cf9 940c 0cf4                             JMP         RETURN_Y                   ;   RETURN_Y
                                 RETURN_X:
                                 ;   x will decrease by 1 after each loop
000cfb 940e 0acc                             CALL        SHOW_RETURN_STATUS
000cfd 3061                                  CPI         GLOBAL1,       1           ; if x == 0:
000cfe f018                                  BRLO        RETURN_END                 ;   RETURN_END
000cff 956a                                  DEC         GLOBAL1                    ; else: x--
000d00 940c 0cfb                             JMP         RETURN_X                   ;   RETURN_X
                                 RETURN_END:
000d02 940e 0acc                             CALL        SHOW_RETURN_STATUS
                                 
                                 ;   landing
000d04 e029                                  LDI         ARG3,       DRONE_HEIGHT        ; initialize the height of drone
                                 DRONE_LANDING:
000d05 940e 09ac                             CALL        DISPLAY_CLR
000d07 e1f1
000d08 e7ec
000d09 9105
000d0a 3000
000d0b f031
000d0c 940e 0949
000d0e 940e 095a
000d10 940c 0d09                             DISPLAY_STRING          STRING_STATUS_L
000d12 940e 09b4                             CALL        DISPLAY_NEWLINE
000d14 2700                                  CLR         ARG1                    ; show X, Y = (0, 0)
000d15 2711                                  CLR         ARG2
000d16 940e 0a35                             CALL        SHOW_LOCATION_X
000d18 940e 0a4c                             CALL        SHOW_LOCATION_Y
000d1a 940e 0a6d                             CALL        SHOW_LOCATION_Z         ; show z = z(0, 0) + ARG3
000d1c 952a                                  DEC         ARG3
000d1d 3021                                  CPI         ARG3,       1
000d1e f028                                  BRLO        DRONE_LANDING_END
000d1f eb08                                  LDI         ARG1,       LOW(3000)
000d20 e01b                                  LDI         ARG2,       HIGH(3000)
000d21 940e 08d8                             CALL        DELAY
000d23 cfe1                                  RJMP         DRONE_LANDING
                                 DRONE_LANDING_END:
000d24 940e 0923                             CALL        DEC_LED
000d26 2788
000d27 9380 009b
000d29 e080
000d2a 9380 009a
000d2c e081
000d2d 9380 0091
000d2f e281
000d30 9380 0090                             SET_MOTOR_SPEED         0x00
                                 
                                 ;  SHOW RESULT
000d32 940e 09ac                             CALL        DISPLAY_CLR
000d34 e1f1
000d35 e8ec
000d36 9105
000d37 3000
000d38 f031
000d39 940e 0949
000d3b 940e 095a
000d3d 940c 0d36                             DISPLAY_STRING          STRING_ACCIDENT
000d3f 940e 09b4                             CALL        DISPLAY_NEWLINE
000d41 ef8f                      			LDI			TEMP1,			0xFF
000d42 1628                                  CP          ACCIDENT_X,   TEMP1
000d43 f041                                  BREQ        END_SIMULATION_FAIL
                                 END_SIMULATION_SUCCESS:            
000d44 2d02                                  MOV         ARG1,         ACCIDENT_X
000d45 2d13                                  MOV         ARG2,         ACCIDENT_Y
000d46 940e 0a35                             CALL        SHOW_LOCATION_X
000d48 940e 0a4c                             CALL        SHOW_LOCATION_Y
000d4a 940c 0d57                             JMP         END
                                 END_SIMULATION_FAIL:
000d4c e1f1
000d4d e9e8
000d4e 9105
000d4f 3000
000d50 f031
000d51 940e 0949
000d53 940e 095a
000d55 940c 0d4e                             DISPLAY_STRING          STRING_NOT_FOUND
                                 
                                 ;====================================================================================
                                 
                                 END:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega2560" register use summary:
x  :   0 y  :   0 z  :  22 r0 :  18 r1 :   6 r2 :   7 r3 :   5 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 143 r17:  59 r18:  19 r19:   0 r20:  47 
r21:  16 r22:  16 r23:  14 r24: 228 r25:  32 r26:   0 r27:   0 r28:   0 
r29:   0 r30:  26 r31:  26 
Registers used: 16 out of 35 (45.7%)

"ATmega2560" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   6 add   :  21 adiw  :   1 and   :   0 
andi  :  14 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  32 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   4 brlt  :   0 brmi  :   0 
brne  :   7 brpl  :   0 brsh  :  18 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  : 175 cbi   :   3 cbr   :   0 
clc   :   0 clh   :   0 cli   :   3 cln   :   0 clr   :  17 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :  10 cpc   :   0 
cpi   :  47 cpse  :   0 dec   :   9 eicall:   0 eijmp :   0 elpm  :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  21 inc   :   5 jmp   :  44 ld    :   0 ldd   :   0 ldi   : 151 
lds   :   2 lpm   :  24 lsl   :   1 lsr   :   3 mov   :  33 movw  :   0 
mul   :   7 muls  :   0 mulsu :   0 neg   :   0 nop   :  18 or    :   0 
ori   :  11 out   :  31 pop   :  71 push  :  71 rcall :   0 ret   :  22 
reti  :   0 rjmp  :   5 rol   :   0 ror   :   0 sbc   :   0 sbci  :   1 
sbi   :   3 sbic  :   0 sbis  :   0 sbiw  :   0 sbr   :   0 sbrc  :   1 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   2 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   0 std   :   0 sts   :  21 sub   :   3 subi  :   1 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 39 out of 116 (33.6%)

"ATmega2560" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001ab2   2318   4300   6618  262144   2.5%
[.dseg] 0x000200 0x000200      0      0      0    8192   0.0%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 1 warnings
